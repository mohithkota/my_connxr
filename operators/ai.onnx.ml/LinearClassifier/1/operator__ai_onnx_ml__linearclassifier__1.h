//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__LINEARCLASSIFIER__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__LINEARCLASSIFIER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'LinearClassifier' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Linear classifier
 * 
 * Constraint T1:
 *   The input must be a tensor of a numeric type, and of shape [N,C] or [C].
 *   In the latter case, it will be treated as [1,C]
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * 
 * Constraint T2:
 *   The output will be a tensor of strings or integers.
 *   Allowed Types: tensor_int64, tensor_string
 * Input T1 X:
 *   Data to be classified.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output T2 Y:
 *   Classification outputs (one class per example).
 *   Allowed Types: tensor_int64, tensor_string
 * 
 * Output tensor(float) Z:
 *   Classification scores ([N,E] - one score for each class and example
 *   Allowed Types: tensor_float
 * Attribute INTS classlabels_ints (optional):
 *   Class labels when using integer labels. One and only one 'classlabels'
 *   attribute must be defined.
 * 
 * Attribute STRINGS classlabels_strings (optional):
 *   Class labels when using string labels. One and only one 'classlabels'
 *   attribute must be defined.
 * 
 * Attribute FLOATS coefficients :
 *   A collection of weights of the model(s).
 * 
 * Attribute FLOATS intercepts (optional):
 *   A collection of intercepts.
 * 
 * Attribute INT multi_class (optional):
 *   Indicates whether to do OvR or multinomial (0=OvR is the default).
 * 
 * Attribute STRING post_transform (optional):
 *   Indicates the transform to apply to the scores vector.<br>One of 'NONE,'
 *   'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:429
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#LinearClassifier
 */

operator_status
prepare_operator__ai_onnx_ml__linearclassifier__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__linearclassifier__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__linearclassifier__1;

operator_executer
resolve_operator__ai_onnx_ml__linearclassifier__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearclassifier__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearclassifier__1__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearclassifier__1__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearclassifier__1__T1_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearclassifier__1__T1_tensor_int64(
    node_context *ctx
);

# endif