//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__TREEENSEMBLEREGRESSOR__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__TREEENSEMBLEREGRESSOR__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'TreeEnsembleRegressor' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Tree Ensemble regressor.  Returns the regressed values for each input in N.<br>
 *     All args with nodes_ are fields of a tuple of tree nodes, and
 *     it is assumed they are the same length, and an index i will decode the
 *     tuple across these inputs.  Each node id can appear only once
 *     for each tree id.<br>
 *     All fields prefixed with target_ are tuples of votes at the leaves.<br>
 *     A leaf may have multiple votes, where each vote is weighted by
 *     the associated target_weights index.<br>
 *     All trees must have their node ids start at 0 and increment by 1.<br>
 *     Mode enum is BRANCH_LEQ, BRANCH_LT, BRANCH_GTE, BRANCH_GT, BRANCH_EQ, BRANCH_NEQ, LEAF
 * 
 * Constraint T:
 *   The input type must be a tensor of a numeric type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Input T X:
 *   Input of shape [N,F]
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output tensor(float) Y:
 *   N classes
 *   Allowed Types: tensor_float
 * Attribute STRING aggregate_function (optional):
 *   Defines how to aggregate leaf values within a target. <br>One of
 *   'AVERAGE,' 'SUM,' 'MIN,' 'MAX.'
 * 
 * Attribute FLOATS base_values (optional):
 *   Base values for classification, added to final class score; the size must
 *   be the same as the classes or can be left unassigned (assumed 0)
 * 
 * Attribute INT n_targets (optional):
 *   The total number of targets.
 * 
 * Attribute INTS nodes_falsenodeids (optional):
 *   Child node if expression is false
 * 
 * Attribute INTS nodes_featureids (optional):
 *   Feature id for each node.
 * 
 * Attribute FLOATS nodes_hitrates (optional):
 *   Popularity of each node, used for performance and may be omitted.
 * 
 * Attribute INTS nodes_missing_value_tracks_true (optional):
 *   For each node, define what to do in the presence of a NaN: use the 'true'
 *   (if the attribute value is 1) or 'false' (if the attribute value is 0)
 *   branch based on the value in this array.<br>This attribute may be left
 *   undefined and the default value is false (0) for all nodes.
 * 
 * Attribute STRINGS nodes_modes (optional):
 *   The node kind, that is, the comparison to make at the node. There is no
 *   comparison to make at a leaf node.<br>One of 'BRANCH_LEQ', 'BRANCH_LT',
 *   'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ', 'LEAF'
 * 
 * Attribute INTS nodes_nodeids (optional):
 *   Node id for each node. Node ids must restart at zero for each tree and
 *   increase sequentially.
 * 
 * Attribute INTS nodes_treeids (optional):
 *   Tree id for each node.
 * 
 * Attribute INTS nodes_truenodeids (optional):
 *   Child node if expression is true
 * 
 * Attribute FLOATS nodes_values (optional):
 *   Thresholds to do the splitting on for each node.
 * 
 * Attribute STRING post_transform (optional):
 *   Indicates the transform to apply to the score. <br>One of 'NONE,'
 *   'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
 * 
 * Attribute INTS target_ids (optional):
 *   The index of the target that each weight is for
 * 
 * Attribute INTS target_nodeids (optional):
 *   The node id of each weight
 * 
 * Attribute INTS target_treeids (optional):
 *   The id of the tree that each node is in.
 * 
 * Attribute FLOATS target_weights (optional):
 *   The weight for each target
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/old.cc:341
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#TreeEnsembleRegressor
 */

operator_status
prepare_operator__ai_onnx_ml__treeensembleregressor__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__treeensembleregressor__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__treeensembleregressor__1;

operator_executer
resolve_operator__ai_onnx_ml__treeensembleregressor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleregressor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleregressor__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleregressor__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleregressor__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleregressor__1__T_tensor_int64(
    node_context *ctx
);

# endif