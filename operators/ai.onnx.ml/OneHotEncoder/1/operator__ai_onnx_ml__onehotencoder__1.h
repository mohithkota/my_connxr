//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__ONEHOTENCODER__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__ONEHOTENCODER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'OneHotEncoder' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Replace each input element with an array of ones and zeros, where a single
 *     one is placed at the index of the category that was passed in. The total category count
 *     will determine the size of the extra dimension of the output array Y.<br>
 *     For example, if we pass a tensor with a single value of 4, and a category count of 8,
 *     the output will be a tensor with ``[0,0,0,0,1,0,0,0]``.<br>
 *     This operator assumes every input feature is from the same set of categories.<br>
 *     If the input is a tensor of float, int32, or double, the data will be cast
 *     to integers and the cats_int64s category list will be used for the lookups.
 * 
 * Constraint T:
 *   The input must be a tensor of a numeric type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64,
 *                  tensor_string
 * Input T X:
 *   Data to be encoded.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64,
 *                  tensor_string
 * Output tensor(float) Y:
 *   Encoded output data, having one more dimension than X.
 *   Allowed Types: tensor_float
 * Attribute INTS cats_int64s (optional):
 *   List of categories, ints.<br>One and only one of the 'cats_*' attributes
 *   must be defined.
 * 
 * Attribute STRINGS cats_strings (optional):
 *   List of categories, strings.<br>One and only one of the 'cats_*'
 *   attributes must be defined.
 * 
 * Attribute INT zeros (optional):
 *   If true and category is not present, will return all zeros; if false and
 *   a category if not found, the operator will fail.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:593
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#OneHotEncoder
 */

operator_status
prepare_operator__ai_onnx_ml__onehotencoder__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__onehotencoder__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__onehotencoder__1;

operator_executer
resolve_operator__ai_onnx_ml__onehotencoder__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__onehotencoder__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__onehotencoder__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__onehotencoder__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__onehotencoder__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__onehotencoder__1__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__onehotencoder__1__T_tensor_string(
    node_context *ctx
);

# endif