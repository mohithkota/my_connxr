//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__SVMREGRESSOR__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__SVMREGRESSOR__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'SVMRegressor' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Support Vector Machine regression prediction and one-class SVM anomaly detection.
 * 
 * Constraint T:
 *   The input type must be a tensor of a numeric type, either [C] or [N,C].
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Input T X:
 *   Data to be regressed.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output tensor(float) Y:
 *   Regression outputs (one score per target per example).
 *   Allowed Types: tensor_float
 * Attribute FLOATS coefficients (optional):
 *   Support vector coefficients.
 * 
 * Attribute FLOATS kernel_params (optional):
 *   List of 3 elements containing gamma, coef0, and degree, in that order.
 *   Zero if unused for the kernel.
 * 
 * Attribute STRING kernel_type (optional):
 *   The kernel type, one of 'LINEAR,' 'POLY,' 'RBF,' 'SIGMOID'.
 * 
 * Attribute INT n_supports (optional):
 *   The number of support vectors.
 * 
 * Attribute INT one_class (optional):
 *   Flag indicating whether the regression is a one-class SVM or not.
 * 
 * Attribute STRING post_transform (optional):
 *   Indicates the transform to apply to the score. <br>One of 'NONE,'
 *   'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT.'
 * 
 * Attribute FLOATS rho (optional):
 *   
 * 
 * Attribute FLOATS support_vectors (optional):
 *   Chosen support vectors
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:746
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#SVMRegressor
 */

operator_status
prepare_operator__ai_onnx_ml__svmregressor__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__svmregressor__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__svmregressor__1;

operator_executer
resolve_operator__ai_onnx_ml__svmregressor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmregressor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmregressor__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmregressor__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmregressor__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmregressor__1__T_tensor_int64(
    node_context *ctx
);

# endif