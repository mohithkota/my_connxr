//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__ZIPMAP__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__ZIPMAP__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'ZipMap' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Creates a map from the input and the attributes.<br>
 *     The values are provided by the input tensor, while the keys are specified by the attributes.
 *     Must provide keys in either classlabels_strings or classlabels_int64s (but not both).<br>
 *     The columns of the tensor correspond one-by-one to the keys specified by the attributes. There must be as many columns as keys.<br>
 * 
 * Constraint T:
 *   The output will be a sequence of string or integer maps to float.
 *   Allowed Types: seq_map_int64__float, seq_map_string__float
 * Input tensor(float) X:
 *   The input values
 *   Allowed Types: tensor_float
 * Output T Z:
 *   The output map
 *   Allowed Types: seq_map_int64__tensor_float, seq_map_string__tensor_float
 * Attribute INTS classlabels_int64s (optional):
 *   The keys when using int keys.<br>One and only one of the 'classlabels_*'
 *   attributes must be defined.
 * 
 * Attribute STRINGS classlabels_strings (optional):
 *   The keys when using string keys.<br>One and only one of the
 *   'classlabels_*' attributes must be defined.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:1209
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#ZipMap
 */

operator_status
prepare_operator__ai_onnx_ml__zipmap__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__zipmap__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__zipmap__1;

operator_executer
resolve_operator__ai_onnx_ml__zipmap__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__zipmap__1(
    node_context *ctx
);

# endif