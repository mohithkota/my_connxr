//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__CASTMAP__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__CASTMAP__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'CastMap' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Converts a map to a tensor.<br>The map key must be an int64 and the values will be ordered
 *     in ascending order based on this key.<br>The operator supports dense packing or sparse packing.
 *     If using sparse packing, the key cannot exceed the max_map-1 value.
 * 
 * Constraint T1:
 *   The input must be an integer map to either string or float.
 *   Allowed Types: map_int64__float, map_int64__string
 * 
 * Constraint T2:
 *   The output is a 1-D tensor of string, float, or integer.
 *   Allowed Types: tensor_float, tensor_int64, tensor_string
 * Input T1 X:
 *   The input map that is to be cast to a tensor
 *   Allowed Types: map_int64__tensor_float, map_int64__tensor_string
 * Output T2 Y:
 *   A tensor representing the same data as the input map, ordered by their
 *   keys
 *   Allowed Types: tensor_float, tensor_int64, tensor_string
 * Attribute STRING cast_to (optional):
 *   A string indicating the desired element type of the output tensor, one of
 *   'TO_FLOAT', 'TO_STRING', 'TO_INT64'.
 * 
 * Attribute STRING map_form (optional):
 *   Indicates whether to only output as many values as are in the input
 *   (dense), or position the input based on using the key of the map as the
 *   index of the output (sparse).<br>One of 'DENSE', 'SPARSE'.
 * 
 * Attribute INT max_map (optional):
 *   If the value of map_form is 'SPARSE,' this attribute indicates the total
 *   length of the output tensor.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:99
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#CastMap
 */

operator_status
prepare_operator__ai_onnx_ml__castmap__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__castmap__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__castmap__1;

operator_executer
resolve_operator__ai_onnx_ml__castmap__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__castmap__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__castmap__1__T1_map_int64__float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__castmap__1__T1_map_int64__string(
    node_context *ctx
);

# endif