//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__ERF__9_H
# define OPERATOR_OPERATOR__AI_ONNX__ERF__9_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Erf' version 9
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Computes the error function of the given input tensor element-wise.
 * 
 * Constraint T:
 *   Constrain input and output types to all numeric tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input T input:
 *   Input tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output T output:
 *   The error function of the input tensor computed element-wise. It has the
 *   same shape and type of the input.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8

 *
 * @since version 9
 *
 * @see github/workspace/onnx/defs/math/old.cc:1881
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Erf
 */

operator_status
prepare_operator__ai_onnx__erf__9(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__erf__9;

typedef struct {
// no attributes
} context_operator__ai_onnx__erf__9;

operator_executer
resolve_operator__ai_onnx__erf__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__erf__9__T_tensor_uint8(
    node_context *ctx
);

# endif