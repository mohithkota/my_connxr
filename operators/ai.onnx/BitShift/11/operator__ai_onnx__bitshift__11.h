//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__BITSHIFT__11_H
# define OPERATOR_OPERATOR__AI_ONNX__BITSHIFT__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'BitShift' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Bitwise shift operator performs element-wise operation. For each input element, if the
 * attribute "direction" is "RIGHT", this operator moves its binary representation toward
 * the right side so that the input value is effectively decreased. If the attribute "direction"
 * is "LEFT", bits of binary representation moves toward the left side, which results the
 * increase of its actual value. The input X is the tensor to be shifted and another input
 * Y specifies the amounts of shifting. For example, if "direction" is "Right", X is [1, 4],
 * and S is [1, 1], the corresponding output Z would be [0, 2]. If "direction" is "LEFT" with
 * X=[1, 2] and S=[1, 2], the corresponding output Y would be [2, 8].
 * 
 * Because this operator supports Numpy-style broadcasting, X's and Y's shapes are
 * not necessarily identical.
 * This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).
 * 
 * Constraint T:
 *   Constrain input and output types to integer tensors.
 *   Allowed Types: tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T X:
 *   First operand, input to be shifted.
 *   Allowed Types: tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input T Y:
 *   Second operand, amounts of shift.
 *   Allowed Types: tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T Z:
 *   Output tensor
 *   Allowed Types: tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute STRING direction :
 *   Direction of moving bits. It can be either "RIGHT" (for right shift) or
 *   "LEFT" (for left shift).
 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/logical/defs.cc:155
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#BitShift
 */

operator_status
prepare_operator__ai_onnx__bitshift__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__bitshift__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__bitshift__11;

operator_executer
resolve_operator__ai_onnx__bitshift__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bitshift__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bitshift__11__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bitshift__11__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bitshift__11__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bitshift__11__T_tensor_uint8(
    node_context *ctx
);

# endif