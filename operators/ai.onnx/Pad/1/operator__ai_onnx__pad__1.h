//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__PAD__1_H
# define OPERATOR_OPERATOR__AI_ONNX__PAD__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Pad' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Given `data` tensor, paddings, mode, and value.
 * Example:
 *   Insert 0 paddings to the beginning of the second dimension.
 *   data = [
 *       [1.0, 1.2],
 *       [2.3, 3.4],
 *       [4.5, 5.7],
 *   ]
 *   paddings = [0, 0, 2, 0]
 *   output = [
 *       [
 *           [0.0, 0.0, 1.0, 1.2],
 *           [0.0, 0.0, 2.3, 3.4],
 *           [0.0, 0.0, 4.5, 5.7],
 *       ],
 *   ]
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T data:
 *   Input tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T output:
 *   Tensor after padding.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute STRING mode (optional):
 *   Three modes: constant(default), reflect, edge
 * 
 * Attribute INTS paddings :
 *   List of integers indicate the padding element count at the beginning and
 *   end of each axis, for 2D it is the number of pixel. `paddings` rank should
 *   be double of the input's rank. `paddings` format should be as follow
 *   [x1_begin, x2_begin...x1_end, x2_end,...], where xi_begin the number of
 *   pixels added at the beginning of axis `i` and xi_end, the number of pixels
 *   added at the end of axis `i`.
 * 
 * Attribute FLOAT value (optional):
 *   One float, indicates the value to be filled, default is 0
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:4305
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Pad
 */

operator_status
prepare_operator__ai_onnx__pad__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__pad__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__pad__1;

operator_executer
resolve_operator__ai_onnx__pad__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__1__T_tensor_float16(
    node_context *ctx
);

# endif