//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__OR__1_H
# define OPERATOR_OPERATOR__AI_ONNX__OR__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Or' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Returns the tensor resulted from performing the `or` logical operation
 * elementwise on the input tensors `A` and `B`.
 * 
 * If broadcasting is enabled, the right-hand-side argument will be broadcasted
 * to match the shape of left-hand-side argument. See the doc of `Add` for a
 * detailed description of the broadcasting rules.
 * 
 * Constraint T:
 *   Constrain input to boolean tensor.
 *   Allowed Types: tensor_bool
 * 
 * Constraint T1:
 *   Constrain output to boolean tensor.
 *   Allowed Types: tensor_bool
 * Input T A:
 *   Left input tensor for the logical operator.
 *   Allowed Types: tensor_bool
 * 
 * Input T B:
 *   Right input tensor for the logical operator.
 *   Allowed Types: tensor_bool
 * Output T1 C:
 *   Result tensor.
 *   Allowed Types: tensor_bool
 * Attribute INT axis (optional):
 *   If set, defines the broadcast dimensions.
 * 
 * Attribute INT broadcast (optional):
 *   Enable broadcasting
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/logical/old.cc:140
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Or
 */

operator_status
prepare_operator__ai_onnx__or__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__or__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__or__1;

operator_executer
resolve_operator__ai_onnx__or__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__or__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__or__1__T_tensor_bool(
    node_context *ctx
);

# endif