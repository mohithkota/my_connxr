//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__UNSQUEEZE__1_H
# define OPERATOR_OPERATOR__AI_ONNX__UNSQUEEZE__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Unsqueeze' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Insert single-dimensional entries to the shape of a tensor.
 * Takes one required argument `axes`, a list of dimensions that will be inserted.
 * Dimension indices in `axes` are as seen in the output tensor. For example:
 *   Given a tensor such that tensor with shape [3, 4, 5], then
 *   Unsqueeze(tensor, axes=[0, 4]) has shape [1, 3, 4, 5, 1]
 * 
 * Constraint T:
 *   Constrain input and output types to all tensor types.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T data:
 *   Original tensor
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T expanded:
 *   Reshaped tensor with same data as input.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INTS axes :
 *   List of non-negative integers, indicate the dimensions to be inserted
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:5135
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Unsqueeze
 */

operator_status
prepare_operator__ai_onnx__unsqueeze__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__unsqueeze__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__unsqueeze__1;

operator_executer
resolve_operator__ai_onnx__unsqueeze__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__1__T_tensor_uint8(
    node_context *ctx
);

# endif