//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__IMAGEDECODER__20_H
# define OPERATOR_OPERATOR__AI_ONNX__IMAGEDECODER__20_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'ImageDecoder' version 20
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Loads and decodes and image from a file. If it can't decode for any reason (e.g. corrupted encoded
 * stream, invalid format, it will return an empty matrix).
 * The following image formats are supported:
 * * BMP
 * * JPEG (note: Lossless JPEG support is optional)
 * * JPEG2000
 * * TIFF
 * * PNG
 * * WebP
 * * Portable image format (PBM, PGM, PPM, PXM, PNM)
 * Decoded images follow a channel-last layout: (Height, Width, Channels).
 * **JPEG chroma upsampling method:**
 * When upsampling the chroma components by a factor of 2, the pixels are linearly interpolated so that the
 * centers of the output pixels are 1/4 and 3/4 of the way between input pixel centers.
 * When rounding, 0.5 is rounded down and up at alternative pixels locations to prevent bias towards
 * larger values (ordered dither pattern).
 * Considering adjacent input pixels A, B, and C, B is upsampled to pixels B0 and B1 so that
 * ```
 * B0 = round_half_down((1/4) * A + (3/4) * B)
 * B1 = round_half_up((3/4) * B + (1/4) * C)
 * ```
 * This method,  is the default chroma upsampling method in the well-established libjpeg-turbo library,
 * also referred as "smooth" or "fancy" upsampling.
 * 
 * Constraint T1:
 *   Constrain input types to 8-bit unsigned integer tensor.
 *   Allowed Types: tensor_uint8
 * 
 * Constraint T2:
 *   Constrain output types to 8-bit unsigned integer tensor.
 *   Allowed Types: tensor_uint8
 * Input T1 encoded_stream:
 *   Encoded stream
 *   Allowed Types: tensor_uint8
 * Output T2 image:
 *   Decoded image
 *   Allowed Types: tensor_uint8
 * Attribute STRING pixel_format (optional):
 *   Pixel format. Can be one of "RGB", "BGR", or "Grayscale".
 *
 * @since version 20
 *
 * @see github/workspace/onnx/defs/image/defs.cc:39
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#ImageDecoder
 */

operator_status
prepare_operator__ai_onnx__imagedecoder__20(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__imagedecoder__20;

typedef struct {
// no attributes
} context_operator__ai_onnx__imagedecoder__20;

operator_executer
resolve_operator__ai_onnx__imagedecoder__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__imagedecoder__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__imagedecoder__20__T1_tensor_uint8(
    node_context *ctx
);

# endif