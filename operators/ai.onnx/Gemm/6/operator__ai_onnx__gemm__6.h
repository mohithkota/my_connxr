//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__GEMM__6_H
# define OPERATOR_OPERATOR__AI_ONNX__GEMM__6_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Gemm' version 6
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * General Matrix multiplication:
 * https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3
 * Compute Y = alpha * A * B + beta * C, where input tensor A has
 * dimension (M X K), input tensor B has dimension (K X N), input tensor C and
 * output tensor Y have dimension (M X N).
 * If attribute broadcast is non-zero, input tensor C will be broadcasted to match
 * the dimension requirement. A will be transposed before doing the computation
 * if attribute transA is non-zero, same for B and transB.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T A:
 *   Input tensor A
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T B:
 *   Input tensor B
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T C:
 *   Input tensor C
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   Output tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute FLOAT alpha (optional):
 *   Scalar multiplier for the product of input tensors A * B, the default
 *   value is 1.0.
 * 
 * Attribute FLOAT beta (optional):
 *   Scalar multiplier for input tensor C, the default value is 1.0.
 * 
 * Attribute INT broadcast (optional):
 *   Whether C should be broadcasted
 * 
 * Attribute INT transA (optional):
 *   Whether A should be transposed
 * 
 * Attribute INT transB (optional):
 *   Whether B should be transposed
 *
 * @since version 6
 *
 * @see github/workspace/onnx/defs/math/old.cc:3277
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Gemm
 */

operator_status
prepare_operator__ai_onnx__gemm__6(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__gemm__6;

typedef struct {
// no attributes
} context_operator__ai_onnx__gemm__6;

operator_executer
resolve_operator__ai_onnx__gemm__6(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gemm__6(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gemm__6__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gemm__6__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gemm__6__T_tensor_float16(
    node_context *ctx
);

# endif