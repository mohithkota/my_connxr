//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__RANGE__11_H
# define OPERATOR_OPERATOR__AI_ONNX__RANGE__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Range' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Generate a tensor containing a sequence of numbers that begin at `start` and extends by increments of `delta`
 * up to `limit` (exclusive).
 * 
 * The number of elements in the output of range is computed as below:
 * 
 * ```
 * number_of_elements = max( ceil( (limit - start) / delta ) , 0 )
 * ```
 * 
 * The pseudocode determining the contents of the output is shown below:
 * 
 * ```
 * for(int i=0; i<number_of_elements; ++i) {
 *   output[i] =  start + (i * delta);
 * }
 * ```
 * 
 * Example 1
 * 
 * ```
 * Inputs: start = 3, limit = 9, delta = 3
 * Output: [3, 6]
 * ```
 * 
 * Example 2
 * 
 * ```
 * Inputs: start = 10, limit = 4, delta = -2
 * Output: [10, 8, 6]
 * ```
 * 
 * Constraint T:
 *   Constrain input types to common numeric type tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_int16, tensor_int32,
 *                  tensor_int64
 * Input T start:
 *   Scalar. First entry for the range of output values.
 *   Allowed Types: tensor_double, tensor_float, tensor_int16, tensor_int32,
 *                  tensor_int64
 * 
 * Input T limit:
 *   Scalar. Exclusive upper limit for the range of output values.
 *   Allowed Types: tensor_double, tensor_float, tensor_int16, tensor_int32,
 *                  tensor_int64
 * 
 * Input T delta:
 *   Scalar. Value to step by.
 *   Allowed Types: tensor_double, tensor_float, tensor_int16, tensor_int32,
 *                  tensor_int64
 * Output T output:
 *   A 1-D tensor with same type as the inputs containing generated range of
 *   values.
 *   Allowed Types: tensor_double, tensor_float, tensor_int16, tensor_int32,
 *                  tensor_int64

 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/generator/defs.cc:453
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Range
 */

operator_status
prepare_operator__ai_onnx__range__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__range__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__range__11;

operator_executer
resolve_operator__ai_onnx__range__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__range__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__range__11__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__range__11__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__range__11__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__range__11__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__range__11__T_tensor_int64(
    node_context *ctx
);

# endif