//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SEQUENCEERASE__11_H
# define OPERATOR_OPERATOR__AI_ONNX__SEQUENCEERASE__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'SequenceErase' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Outputs a tensor sequence that removes the tensor at 'position' from 'input_sequence'.
 * Accepted range for 'position' is in `[-n, n - 1]`, where `n` is the number of tensors in 'input_sequence'.
 * Negative value means counting positions from the back.
 * 'position' is optional, by default it erases the last tensor from 'input_sequence'.
 * 
 * Constraint S:
 *   Constrain to any tensor type.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * 
 * Constraint I:
 *   Constrain position to integral tensor. It must be a scalar(tensor of
 *   empty shape).
 *   Allowed Types: tensor_int32, tensor_int64
 * Input S input_sequence:
 *   Input sequence.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * 
 * Input I position:
 *   Position of the tensor in the sequence. Negative value means counting
 *   positions from the back. Accepted range in `[-n, n - 1]`, where `n` is the
 *   number of tensors in 'input_sequence'. It is an error if any of the index
 *   values are out of bounds. It must be a scalar(tensor of empty shape).
 *   Allowed Types: tensor_int32, tensor_int64
 * Output S output_sequence:
 *   Output sequence that has the tensor at the specified position removed.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8

 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/sequence/defs.cc:203
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#SequenceErase
 */

operator_status
prepare_operator__ai_onnx__sequenceerase__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__sequenceerase__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__sequenceerase__11;

operator_executer
resolve_operator__ai_onnx__sequenceerase__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_bool__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_bool__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_complex128__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_complex128__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_complex64__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_complex64__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_double__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_double__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_float__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_float__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_float16__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_float16__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int16__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int16__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int32__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int32__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int64__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int64__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int8__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_int8__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_string__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_string__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint16__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint16__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint32__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint32__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint64__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint64__I_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint8__I_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequenceerase__11__S_seq_tensor_uint8__I_tensor_int64(
    node_context *ctx
);

# endif