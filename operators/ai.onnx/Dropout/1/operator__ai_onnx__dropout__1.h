//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__DROPOUT__1_H
# define OPERATOR_OPERATOR__AI_ONNX__DROPOUT__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Dropout' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Dropout takes one input data (Tensor<float>) and produces two Tensor outputs,
 * output (Tensor<float>) and mask (Tensor<bool>). Depending on whether it is in
 * test mode or not, the output Y will either be a random dropout, or a simple
 * copy of the input. Note that our implementation of Dropout does scaling in
 * the training phase, so during testing nothing needs to be done.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T data:
 *   The input data as Tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T output:
 *   The output.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T mask:
 *   The output mask. If is_test is nonzero, this output is not filled.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute INTS consumed_inputs (optional):
 *   legacy optimization attribute.
 * 
 * Attribute INT is_test (optional):
 *   (int, default 0) if nonzero, run dropout in test mode where the output is
 *   simply Y = X.
 * 
 * Attribute FLOAT ratio (optional):
 *   (float, default 0.5) the ratio of random dropout
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/nn/old.cc:3540
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Dropout
 */

operator_status
prepare_operator__ai_onnx__dropout__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__dropout__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__dropout__1;

operator_executer
resolve_operator__ai_onnx__dropout__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__1__T_tensor_float16(
    node_context *ctx
);

# endif