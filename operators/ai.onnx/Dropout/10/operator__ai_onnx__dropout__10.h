//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__DROPOUT__10_H
# define OPERATOR_OPERATOR__AI_ONNX__DROPOUT__10_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Dropout' version 10
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Dropout takes one input floating tensor and produces two tensor outputs,
 * output (floating tensor) and mask (`Tensor<bool>`). Depending on whether it is
 * in test mode or not, the output Y will either be a random dropout, or a simple
 * copy of the input. Note that our implementation of Dropout does scaling in
 * the training phase, so during testing nothing needs to be done.
 * This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Constraint T1:
 *   Constrain output mask types to boolean tensors.
 *   Allowed Types: tensor_bool
 * Input T data:
 *   The input data as Tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T output:
 *   The output.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T1 mask:
 *   The output mask.
 *   Allowed Types: tensor_bool
 * Attribute FLOAT ratio (optional):
 *   The ratio of random dropout
 *
 * @since version 10
 *
 * @see github/workspace/onnx/defs/nn/old.cc:3626
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Dropout
 */

operator_status
prepare_operator__ai_onnx__dropout__10(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__dropout__10;

typedef struct {
// no attributes
} context_operator__ai_onnx__dropout__10;

operator_executer
resolve_operator__ai_onnx__dropout__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__10__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__10__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dropout__10__T_tensor_float16(
    node_context *ctx
);

# endif