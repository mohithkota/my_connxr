//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__QUANTIZELINEAR__10_H
# define OPERATOR_OPERATOR__AI_ONNX__QUANTIZELINEAR__10_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'QuantizeLinear' version 10
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * The linear per-tensor/layer quantization operator. It consumes a high precision tensor, a scale, a zero point to compute the low precision / quantized tensor.
 * The quantization formula is y = saturate ((x / y_scale) + y_zero_point). For saturation, it saturates to [0, 255] if it's uint8, or [-128, 127] if it's int8.
 * For (x / y_scale), it's rounding to the nearest even. Refer to https://en.wikipedia.org/wiki/Rounding for details. 'y_zero_point' and 'y' must have same type.
 * 
 * Constraint T1:
 *   Constrain 'x' to float or int32 tensor.
 *   Allowed Types: tensor_float, tensor_int32
 * 
 * Constraint T2:
 *   Constrain 'y_zero_point' and 'y' to 8-bit integer tensor.
 *   Allowed Types: tensor_int8, tensor_uint8
 * Input T1 x:
 *   N-D full precision Input tensor to be quantized.
 *   Allowed Types: tensor_float, tensor_int32
 * 
 * Input tensor(float) y_scale:
 *   Scale for doing quantization to get 'y'. It's a scalar, which means a
 *   per-tensor/layer quantization.
 *   Allowed Types: tensor_float
 * 
 * Input T2 y_zero_point:
 *   Zero point for doing quantization to get 'y'. It's a scalar, which means
 *   a per-tensor/layer quantization. Default value is uint8 typed 0 if it's
 *   not specified.
 *   Allowed Types: tensor_int8, tensor_uint8
 * Output T2 y:
 *   N-D quantized output tensor. It has same shape as input 'x'.
 *   Allowed Types: tensor_int8, tensor_uint8

 *
 * @since version 10
 *
 * @see github/workspace/onnx/defs/quantization/old.cc:249
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#QuantizeLinear
 */

operator_status
prepare_operator__ai_onnx__quantizelinear__10(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__quantizelinear__10;

typedef struct {
// no attributes
} context_operator__ai_onnx__quantizelinear__10;

operator_executer
resolve_operator__ai_onnx__quantizelinear__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__quantizelinear__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__quantizelinear__10__T1_tensor_float__T2_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__quantizelinear__10__T1_tensor_float__T2_tensor_uint8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__quantizelinear__10__T1_tensor_int32__T2_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__quantizelinear__10__T1_tensor_int32__T2_tensor_uint8(
    node_context *ctx
);

# endif