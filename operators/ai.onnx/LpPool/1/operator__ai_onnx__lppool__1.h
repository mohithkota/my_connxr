//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__LPPOOL__1_H
# define OPERATOR_OPERATOR__AI_ONNX__LPPOOL__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'LpPool' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * LpPool consumes an input tensor X and applies Lp pooling across the
 *  the tensor according to kernel sizes, stride sizes, and pad lengths.
 *  Lp pooling consisting of computing the Lp norm on all values of a subset
 *  of the input tensor according to the kernel size and downsampling the
 *  data into the output tensor Y for further processing.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T X:
 *   Input data tensor from the previous operator; dimensions for image case
 *   are (N x C x H x W), where N is the batch size, C is the number of
 *   channels, and H and W are the height and the width of the data. For non
 *   image case, the dimension are in the form of (N x C x D1 x D2 ... Dn),
 *   where N is the batch size.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   Output data tensor from Lp pooling across the input tensor. Dimensions
 *   will vary based on various kernel, stride, and pad sizes.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute STRING auto_pad (optional):
 *   auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where
 *   default value is NOTSET, which means explicit padding is used. SAME_UPPER
 *   or SAME_LOWER mean pad the input so that the output size match the
 *   input.In case of odd number add the extra padding at the end for
 *   SAME_UPPER and at the beginning for SAME_LOWER. VALID mean no padding.
 *   DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and
 *   for framework authors, one is explicitly encouraged to use explicit
 *   padding specified in the pads attribute.
 * 
 * Attribute INTS kernel_shape (optional):
 *   The size of the kernel along each axis.
 * 
 * Attribute FLOAT p (optional):
 *   p value of the Lp norm used to pool over the input data, default is 2.0.
 * 
 * Attribute INTS pads (optional):
 *   Padding for the beginning and ending along each axis, it can take any
 *   value greater than or equal to 0. The value represent the number of pixels
 *   added to the beginning and end part of the corresponding axis. `pads`
 *   format should be as follow [x1_begin, x2_begin...x1_end, x2_end,...],
 *   where xi_begin the number of pixels added at the beginning of axis `i` and
 *   xi_end, the number of pixels added at the end of axis `i`. This attribute
 *   cannot be used simultaneously with auto_pad attribute.
 * 
 * Attribute INTS strides (optional):
 *   Stride along each axis.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/nn/old.cc:2620
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#LpPool
 */

operator_status
prepare_operator__ai_onnx__lppool__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__lppool__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__lppool__1;

operator_executer
resolve_operator__ai_onnx__lppool__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__1__T_tensor_float16(
    node_context *ctx
);

# endif