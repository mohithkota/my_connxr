//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__IDENTITY__14_H
# define OPERATOR_OPERATOR__AI_ONNX__IDENTITY__14_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Identity' version 14
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Identity operator
 * 
 * Constraint V:
 *   Constrain input and output types to all tensor and sequence types.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8, tensor_bfloat16, tensor_bool,
 *                  tensor_complex128, tensor_complex64, tensor_double,
 *                  tensor_float, tensor_float16, tensor_int16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_string, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input V input:
 *   Input tensor
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8, tensor_bfloat16, tensor_bool,
 *                  tensor_complex128, tensor_complex64, tensor_double,
 *                  tensor_float, tensor_float16, tensor_int16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_string, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output V output:
 *   Tensor to copy input into.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8, tensor_bfloat16, tensor_bool,
 *                  tensor_complex128, tensor_complex64, tensor_double,
 *                  tensor_float, tensor_float16, tensor_int16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_string, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8

 *
 * @since version 14
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:5633
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Identity
 */

operator_status
prepare_operator__ai_onnx__identity__14(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__identity__14;

typedef struct {
// no attributes
} context_operator__ai_onnx__identity__14;

operator_executer
resolve_operator__ai_onnx__identity__14(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_seq_tensor_uint8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__identity__14__V_tensor_uint8(
    node_context *ctx
);

# endif