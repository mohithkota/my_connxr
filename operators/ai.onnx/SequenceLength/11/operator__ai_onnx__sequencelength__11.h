//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SEQUENCELENGTH__11_H
# define OPERATOR_OPERATOR__AI_ONNX__SEQUENCELENGTH__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'SequenceLength' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Produces a scalar(tensor of empty shape) containing the number of tensors in 'input_sequence'.
 * 
 * Constraint S:
 *   Constrain to any tensor type.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * 
 * Constraint I:
 *   Constrain output to integral tensor. It must be a scalar(tensor of empty
 *   shape).
 *   Allowed Types: tensor_int64
 * Input S input_sequence:
 *   Input sequence.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * Output I length:
 *   Length of input sequence. It must be a scalar(tensor of empty shape).
 *   Allowed Types: tensor_int64

 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/sequence/defs.cc:238
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#SequenceLength
 */

operator_status
prepare_operator__ai_onnx__sequencelength__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__sequencelength__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__sequencelength__11;

operator_executer
resolve_operator__ai_onnx__sequencelength__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sequencelength__11__S_seq_tensor_uint8(
    node_context *ctx
);

# endif