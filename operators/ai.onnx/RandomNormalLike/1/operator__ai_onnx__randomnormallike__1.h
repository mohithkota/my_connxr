//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__RANDOMNORMALLIKE__1_H
# define OPERATOR_OPERATOR__AI_ONNX__RANDOMNORMALLIKE__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'RandomNormalLike' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Generate a tensor with random values drawn from a normal distribution.
 * The shape of the output tensor is copied from the shape of the input tensor,
 * and the parameters of the normal distribution are specified by `mean` and `scale`.
 * 
 * The data type is specified by the 'dtype' argument, or copied from the input tensor if not provided.
 * The 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the
 * TensorProto message, and be valid as an output type.
 * 
 * Constraint T1:
 *   Constrain to any tensor type. If the dtype attribute is not provided this
 *   must be a valid output type.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Constraint T2:
 *   Constrain output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T1 input:
 *   Input tensor to copy shape and optionally type information from.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T2 output:
 *   Output tensor of random values drawn from normal distribution
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute INT dtype (optional):
 *   (Optional) The data type for the elements of the output tensor, if not
 *   specified, we will use the data type of the input tensor.
 * 
 * Attribute FLOAT mean (optional):
 *   The mean of the normal distribution.
 * 
 * Attribute FLOAT scale (optional):
 *   The standard deviation of the normal distribution.
 * 
 * Attribute FLOAT seed (optional):
 *   (Optional) Seed to the random generator, if not specified we will auto
 *   generate one.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/generator/old.cc:163
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#RandomNormalLike
 */

operator_status
prepare_operator__ai_onnx__randomnormallike__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__randomnormallike__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__randomnormallike__1;

operator_executer
resolve_operator__ai_onnx__randomnormallike__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__randomnormallike__1__T1_tensor_uint8(
    node_context *ctx
);

# endif