//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__ROUND__11_H
# define OPERATOR_OPERATOR__AI_ONNX__ROUND__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Round' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Round takes one input Tensor and rounds the values, element-wise, meaning
 * it finds the nearest integer for each value.
 * In case of halves, the rule is to round them to the nearest even integer.
 * If input x is integral, +0, -0, NaN,  or infinite, x itself is returned.
 * The output tensor has the same shape and type as the input.
 * 
 * Examples:
 * ```
 * round([0.9]) = [1.0]
 * round([2.5]) = [2.0]
 * round([2.3]) = [2.0]
 * round([1.5]) = [2.0]
 * round([-4.5]) = [-4.0]
 * ```
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T X:
 *   Input tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   Output tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16

 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/math/old.cc:407
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Round
 */

operator_status
prepare_operator__ai_onnx__round__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__round__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__round__11;

operator_executer
resolve_operator__ai_onnx__round__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__round__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__round__11__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__round__11__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__round__11__T_tensor_float16(
    node_context *ctx
);

# endif