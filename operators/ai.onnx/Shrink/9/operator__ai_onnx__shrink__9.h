//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SHRINK__9_H
# define OPERATOR_OPERATOR__AI_ONNX__SHRINK__9_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Shrink' version 9
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Shrink takes one input data (Tensor<numeric>) and produces one Tensor output,
 * having same datatype and shape with input. It has two attributes, lambd and
 * bias. The formula of this operator is: If x < -lambd, y = x + bias;
 * If x > lambd, y = x - bias; Otherwise, y = 0.
 * 
 * Constraint T:
 *   Constrain input to only numeric types.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input T input:
 *   The input data as Tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output T output:
 *   The output.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute FLOAT bias (optional):
 *   The bias value added to output. Default is 0.
 * 
 * Attribute FLOAT lambd (optional):
 *   The lambd value for the Shrink formulation. Default is 0.5.
 *
 * @since version 9
 *
 * @see github/workspace/onnx/defs/nn/defs.cc:1939
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Shrink
 */

operator_status
prepare_operator__ai_onnx__shrink__9(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__shrink__9;

typedef struct {
// no attributes
} context_operator__ai_onnx__shrink__9;

operator_executer
resolve_operator__ai_onnx__shrink__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shrink__9__T_tensor_uint8(
    node_context *ctx
);

# endif