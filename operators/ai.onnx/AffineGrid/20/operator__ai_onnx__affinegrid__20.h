//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__AFFINEGRID__20_H
# define OPERATOR_OPERATOR__AI_ONNX__AFFINEGRID__20_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'AffineGrid' version 20
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Generates a 2D or 3D flow field (sampling grid), given a batch of affine matrices theta
 * (https://pytorch.org/docs/stable/generated/torch.nn.functional.affine_grid.html).
 * An affine matrix `theta` is applied to a position tensor represented in its homogeneous expression. Here is an example in 3D:
 * ```
 * [r00, r01, r02, t0]   [x]   [x']
 * [r10, r11, r12, t1] * [y] = [y']
 * [r20, r21, r22, t2]   [z]   [z']
 * [0,   0,   0,   1 ]   [1]   [1 ]
 * ```
 * where `(x, y, z)` is the position in the original space, `(x', y', z')` is the position in the output space.
 * The last row is always `[0, 0, 0, 1]` and is not stored in the affine matrix. Therefore we have `theta` of shape `(N, 2, 3)` for 2D or `(N, 3, 4)` for 3D.
 * 
 * Input `size` is used to define grid of positions evenly spaced in the original 2D or 3D space, with dimensions ranging from `-1` to `1`.
 * The output `grid` contains positions in the output space.
 * 
 * When `align_corners=1`, consider `-1` and `1` to refer to the centers of the corner pixels (mark `v` in illustration).
 * ```
 * v            v            v            v
 * |-------------------|------------------|
 * -1                  0                  1
 * ```
 * When `align_corners=0`, consider `-1` and `1` to refer to the outer edge of the corner pixels.
 * ```
 *     v        v         v         v
 * |------------------|-------------------|
 * -1                 0                   1
 * ```
 * 
 * Constraint T1:
 *   Constrain grid types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * 
 * Constraint T2:
 *   Constrain size's type to int64 tensors.
 *   Allowed Types: tensor_int64
 * Input T1 theta:
 *   input batch of affine matrices with shape (N, 2, 3) for 2D or (N, 3, 4)
 *   for 3D
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * 
 * Input T2 size:
 *   the target output image size (N, C, H, W) for 2D or (N, C, D, H, W) for
 *   3D
 *   Allowed Types: tensor_int64
 * Output T1 grid:
 *   output tensor of shape (N, H, W, 2) of 2D sample coordinates or (N, D, H,
 *   W, 3) of 3D sample coordinates.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Attribute INT align_corners (optional):
 *   if align_corners=1, consider -1 and 1 to refer to the centers of the
 *   corner pixels. if align_corners=0, consider -1 and 1 to refer to the outer
 *   edge the corner pixels.
 *
 * @since version 20
 *
 * @see github/workspace/onnx/defs/tensor/defs.cc:2444
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#AffineGrid
 */

operator_status
prepare_operator__ai_onnx__affinegrid__20(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__affinegrid__20;

typedef struct {
// no attributes
} context_operator__ai_onnx__affinegrid__20;

operator_executer
resolve_operator__ai_onnx__affinegrid__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__affinegrid__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__affinegrid__20__T1_tensor_bfloat16__T2_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__affinegrid__20__T1_tensor_double__T2_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__affinegrid__20__T1_tensor_float__T2_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__affinegrid__20__T1_tensor_float16__T2_tensor_int64(
    node_context *ctx
);

# endif