//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__RESHAPE__1_H
# define OPERATOR_OPERATOR__AI_ONNX__RESHAPE__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Reshape' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Reshape the input tensor similar to numpy.reshape.
 * It takes a tensor as input and an argument `shape`. It outputs the reshaped tensor.
 * At most one dimension of the new shape can be -1. In this case, the value is
 * inferred from the size of the tensor and the remaining dimensions. A dimension
 * could also be 0, in which case the actual dimension value is unchanged (i.e. taken
 * from the input tensor). Shape (second input) could be an empty shape, which means converting to a scalar.
 * The input tensor's shape and the output tensor's shape are required to have the same number of elements.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T data:
 *   An input tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T reshaped:
 *   Reshaped data.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute INTS consumed_inputs (optional):
 *   legacy optimization attribute.
 * 
 * Attribute INTS shape (optional):
 *   New shape
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:4337
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape
 */

operator_status
prepare_operator__ai_onnx__reshape__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__reshape__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__reshape__1;

operator_executer
resolve_operator__ai_onnx__reshape__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__reshape__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__reshape__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__reshape__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__reshape__1__T_tensor_float16(
    node_context *ctx
);

# endif