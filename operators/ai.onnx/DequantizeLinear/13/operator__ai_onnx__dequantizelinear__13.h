//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__DEQUANTIZELINEAR__13_H
# define OPERATOR_OPERATOR__AI_ONNX__DEQUANTIZELINEAR__13_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'DequantizeLinear' version 13
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * The linear dequantization operator. It consumes a quantized tensor, a scale, and a zero point to compute the full precision tensor.
 * The dequantization formula is `y = (x - x_zero_point) * x_scale`. `x_scale` and `x_zero_point` must have same shape, and can be either a scalar
 * for per-tensor / per layer quantization, or a 1-D tensor for per-axis quantization.
 * `x_zero_point` and `x` must have same type. `x` and `y` must have same shape. In the case of dequantizing int32,
 * there's no zero point (zero point is supposed to be 0).
 * 
 * Constraint T:
 *   Constrain 'x_zero_point' and 'x' to 8-bit/32-bit integer tensor.
 *   Allowed Types: tensor_int32, tensor_int8, tensor_uint8
 * Input T x:
 *   N-D quantized input tensor to be de-quantized.
 *   Allowed Types: tensor_int32, tensor_int8, tensor_uint8
 * 
 * Input tensor(float) x_scale:
 *   Scale for input 'x'. It can be a scalar, which means a per-tensor/layer
 *   dequantization, or a 1-D tensor for per-axis dequantization.
 *   Allowed Types: tensor_float
 * 
 * Input T x_zero_point:
 *   Zero point for input 'x'. Shape must match x_scale. It's optional. Zero
 *   point is 0 when it's not specified.
 *   Allowed Types: tensor_int32, tensor_int8, tensor_uint8
 * Output tensor(float) y:
 *   N-D full precision output tensor. It has same shape as input 'x'.
 *   Allowed Types: tensor_float
 * Attribute INT axis (optional):
 *   (Optional) The axis of the dequantizing dimension of the input tensor.
 *   Ignored for per-tensor quantization. Negative value means counting
 *   dimensions from the back. Accepted range is [-r, r-1] where r =
 *   rank(input).
 *
 * @since version 13
 *
 * @see github/workspace/onnx/defs/quantization/old.cc:202
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#DequantizeLinear
 */

operator_status
prepare_operator__ai_onnx__dequantizelinear__13(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__dequantizelinear__13;

typedef struct {
// no attributes
} context_operator__ai_onnx__dequantizelinear__13;

operator_executer
resolve_operator__ai_onnx__dequantizelinear__13(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dequantizelinear__13(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dequantizelinear__13__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dequantizelinear__13__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__dequantizelinear__13__T_tensor_uint8(
    node_context *ctx
);

# endif