//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__INSTANCENORMALIZATION__1_H
# define OPERATOR_OPERATOR__AI_ONNX__INSTANCENORMALIZATION__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'InstanceNormalization' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Carries out instance normalization as described in the paper
 * https://arxiv.org/abs/1607.08022.
 * 
 * y = scale * (x - mean) / sqrt(variance + epsilon) + B,
 * where mean and variance are computed per instance per channel.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T input:
 *   The input 4-dimensional tensor of shape NCHW.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T scale:
 *   The input 1-dimensional scale tensor of size C.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T B:
 *   The input 1-dimensional bias tensor of size C.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T output:
 *   The output 4-dimensional tensor of the same shape as input.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute INTS consumed_inputs (optional):
 *   legacy optimization attribute.
 * 
 * Attribute FLOAT epsilon (optional):
 *   The epsilon value to use to avoid division by zero, default is 1e-5f.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/nn/old.cc:3509
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#InstanceNormalization
 */

operator_status
prepare_operator__ai_onnx__instancenormalization__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__instancenormalization__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__instancenormalization__1;

operator_executer
resolve_operator__ai_onnx__instancenormalization__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__instancenormalization__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__instancenormalization__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__instancenormalization__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__instancenormalization__1__T_tensor_float16(
    node_context *ctx
);

# endif