//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__NONZERO__9_H
# define OPERATOR_OPERATOR__AI_ONNX__NONZERO__9_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'NonZero' version 9
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Returns the indices of the elements that are non-zero
 *     (in row-major order - by dimension).
 *     NonZero behaves similar to numpy.nonzero:
 *     https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html,
 *     but for scalar input, NonZero produces output shape (0, N) instead of (1, N), which is different from Numpy's behavior.
 * 
 * Constraint T:
 *   Constrain to all tensor types.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T X:
 *   input
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output tensor(int64) Y:
 *   output
 *   Allowed Types: tensor_int64

 *
 * @since version 9
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:3630
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#NonZero
 */

operator_status
prepare_operator__ai_onnx__nonzero__9(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__nonzero__9;

typedef struct {
// no attributes
} context_operator__ai_onnx__nonzero__9;

operator_executer
resolve_operator__ai_onnx__nonzero__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__nonzero__9__T_tensor_uint8(
    node_context *ctx
);

# endif