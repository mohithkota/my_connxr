//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SHAPE__1_H
# define OPERATOR_OPERATOR__AI_ONNX__SHAPE__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Shape' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.
 * 
 * Constraint T:
 *   Input tensor can be of arbitrary type.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Constraint T1:
 *   Constrain output to int64 tensor.
 *   Allowed Types: tensor_int64
 * Input T data:
 *   An input tensor.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T1 shape:
 *   Shape of the input tensor
 *   Allowed Types: tensor_int64

 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:1171
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Shape
 */

operator_status
prepare_operator__ai_onnx__shape__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__shape__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__shape__1;

operator_executer
resolve_operator__ai_onnx__shape__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__1__T_tensor_uint8(
    node_context *ctx
);

# endif