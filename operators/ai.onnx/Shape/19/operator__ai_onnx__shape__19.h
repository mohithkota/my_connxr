//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SHAPE__19_H
# define OPERATOR_OPERATOR__AI_ONNX__SHAPE__19_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Shape' version 19
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.
 * Optional attributes start and end can be used to compute a slice of the input tensor's shape.
 * If start axis is omitted, the slice starts from axis 0.
 * The end axis, if specified, is exclusive (and the returned value will not include the size of that axis).
 * If the end axis is omitted, the axes upto the last one will be included.
 * Negative axes indicate counting back from the last axis.
 * Note that axes will be clamped to the range [0, r-1], where r is the
 * rank of the input tensor if they are out-of-range (after adding r in the case of
 * negative axis). Thus, specifying any end value > r is equivalent to specifying an end
 * value of r, and specifying any start value < -r is equivalent to specifying a start
 * value of 0.
 * 
 * Examples:
 * 
 * ```
 * Input tensor with shape: [2, 3, 4]
 * No attributes specified.
 * Output: [2, 3, 4]
 * ```
 * 
 * ```
 * Input tensor with shape: [2, 3, 4]
 * start: -1
 * Output: [4]
 * ```
 * 
 * ```
 * Input tensor with shape: [2, 3, 4]
 * end: -1
 * Output: [2, 3]
 * ```
 * 
 * ```
 * Input tensor with shape: [2, 3, 4]
 * start: 1
 * end: 2
 * Output: [3]
 * ```
 * 
 * Constraint T:
 *   Input tensor can be of arbitrary type.
 *   Allowed Types: tensor_bfloat16, tensor_bool, tensor_complex128,
 *                  tensor_complex64, tensor_double, tensor_float,
 *                  tensor_float16, tensor_tensor(float8e4m3fn),
 *                  tensor_tensor(float8e4m3fnuz), tensor_tensor(float8e5m2),
 *                  tensor_tensor(float8e5m2fnuz), tensor_int16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_string, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Constraint T1:
 *   Constrain output to int64 tensor.
 *   Allowed Types: tensor_int64
 * Input T data:
 *   An input tensor.
 *   Allowed Types: tensor_bfloat16, tensor_bool, tensor_complex128,
 *                  tensor_complex64, tensor_double, tensor_float,
 *                  tensor_float16, tensor_tensor(float8e4m3fn),
 *                  tensor_tensor(float8e4m3fnuz), tensor_tensor(float8e5m2),
 *                  tensor_tensor(float8e5m2fnuz), tensor_int16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_string, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output T1 shape:
 *   Shape of the input tensor
 *   Allowed Types: tensor_int64
 * Attribute INT end (optional):
 *   (Optional) Ending axis for slicing the shape. Negative value means
 *   counting dimensions from the back. If omitted, sizes of all axes upto
 *   (including) the last one will be included.
 * 
 * Attribute INT start (optional):
 *   (Optional) Starting axis for slicing the shape. Default value is
 *   0.Negative value means counting dimensions from the back.
 *
 * @since version 19
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:6179
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Shape
 */

operator_status
prepare_operator__ai_onnx__shape__19(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__shape__19;

typedef struct {
// no attributes
} context_operator__ai_onnx__shape__19;

operator_executer
resolve_operator__ai_onnx__shape__19(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_tensor(float8e4m3fn)(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_tensor(float8e4m3fnuz)(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_tensor(float8e5m2)(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_tensor(float8e5m2fnuz)(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__shape__19__T_tensor_uint8(
    node_context *ctx
);

# endif