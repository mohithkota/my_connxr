//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__MAX__8_H
# define OPERATOR_OPERATOR__AI_ONNX__MAX__8_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Max' version 8
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Element-wise max of each of the input tensors (with Numpy-style broadcasting support).
 * All inputs and outputs must have the same data type.
 * This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T data_0:
 *   List of tensors for max.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T max:
 *   Output tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16

 *
 * @since version 8
 *
 * @see github/workspace/onnx/defs/math/old.cc:3886
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Max
 */

operator_status
prepare_operator__ai_onnx__max__8(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__max__8;

typedef struct {
// no attributes
} context_operator__ai_onnx__max__8;

operator_executer
resolve_operator__ai_onnx__max__8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__max__8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__max__8__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__max__8__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__max__8__T_tensor_float16(
    node_context *ctx
);

# endif