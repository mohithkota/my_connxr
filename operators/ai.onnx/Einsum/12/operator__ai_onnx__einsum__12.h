//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__EINSUM__12_H
# define OPERATOR_OPERATOR__AI_ONNX__EINSUM__12_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Einsum' version 12
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * An einsum of the form `term1, term2 -> output-term` produces an output tensor using the following equation
 * 
 * ```
 * output[output-term] = reduce-sum( input1[term1] * input2[term2] )
 * ```
 * 
 * where the reduce-sum performs a summation over all the indices occurring in the input terms (term1, term2)
 * that do not occur in the output-term.
 * 
 * The Einsum operator evaluates algebraic tensor operations on a sequence of tensors, using the Einstein summation
 * convention. The equation string contains a comma-separated sequence of lower case letters. Each term corresponds to
 * an operand tensor, and the characters within the terms correspond to operands dimensions.
 * 
 * This sequence may be followed by "->" to separate the left and right hand side of the equation.
 * If the equation contains "->" followed by the right-hand side, the explicit (not classical) form of the Einstein
 * summation is performed, and the right-hand side indices indicate output tensor dimensions. In other cases,
 * output indices are (implicitly) set to the alphabetically sorted sequence of indices appearing exactly once in the
 * equation.
 * 
 * When a dimension character is repeated in the left-hand side, it represents summation along the dimension.
 * 
 * The equation may contain ellipsis ("...") to enable broadcasting. Ellipsis must indicate a fixed number of dimensions.
 * Specifically, every occurrence of ellipsis in the equation must represent the same number of dimensions.
 * The right-hand side may contain exactly one ellipsis. In implicit mode, the ellipsis dimensions are set to the
 * beginning of the output. The equation string may contain space (U+0020) character.
 * 
 * Constraint T:
 *   Constrain input and output types to all numerical tensor types.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input T Inputs:
 *   Operands
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output T Output:
 *   Output tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute STRING equation :
 *   Einsum expression string.
 *
 * @since version 12
 *
 * @see github/workspace/onnx/defs/math/defs.cc:2675
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Einsum
 */

operator_status
prepare_operator__ai_onnx__einsum__12(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__einsum__12;

typedef struct {
// no attributes
} context_operator__ai_onnx__einsum__12;

operator_executer
resolve_operator__ai_onnx__einsum__12(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__einsum__12__T_tensor_uint8(
    node_context *ctx
);

# endif