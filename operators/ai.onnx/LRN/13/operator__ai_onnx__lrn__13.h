//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__LRN__13_H
# define OPERATOR_OPERATOR__AI_ONNX__LRN__13_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'LRN' version 13
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Local Response Normalization proposed in the [AlexNet paper](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf).
 * It normalizes over local input regions.
 * The local region is defined across the channels. For an element `X[n, c, d1, ..., dk]` in a tensor
 * of shape `(N x C x D1 x D2, ..., Dk)`, its region is
 * `{X[n, i, d1, ..., dk] | max(0, c - floor((size - 1) / 2)) <= i <= min(C - 1, c + ceil((size - 1) / 2))}`.
 * 
 * `square_sum[n, c, d1, ..., dk] = sum(X[n, i, d1, ..., dk] ^ 2)`,
 * where `max(0, c - floor((size - 1) / 2)) <= i <= min(C - 1, c + ceil((size - 1) / 2))`.
 * 
 * `Y[n, c, d1, ..., dk] = X[n, c, d1, ..., dk] / (bias + alpha / size * square_sum[n, c, d1, ..., dk] ) ^ beta`
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Input T X:
 *   Input data tensor from the previous operator; dimensions for image case
 *   are (N x C x H x W), where N is the batch size, C is the number of
 *   channels, and H and W are the height and the width of the data. For non
 *   image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn),
 *   where N is the batch size. Optionally, if dimension denotation is in
 *   effect, the operation expects the input data tensor to arrive with the
 *   dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE,
 *   DATA_FEATURE ...].
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Output T Y:
 *   Output tensor, which has the shape and type as input tensor
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Attribute FLOAT alpha (optional):
 *   Scaling parameter.
 * 
 * Attribute FLOAT beta (optional):
 *   The exponent.
 * 
 * Attribute FLOAT bias (optional):
 *   
 * 
 * Attribute INT size :
 *   The number of channels to sum over
 *
 * @since version 13
 *
 * @see github/workspace/onnx/defs/nn/defs.cc:2038
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#LRN
 */

operator_status
prepare_operator__ai_onnx__lrn__13(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__lrn__13;

typedef struct {
// no attributes
} context_operator__ai_onnx__lrn__13;

operator_executer
resolve_operator__ai_onnx__lrn__13(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lrn__13(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lrn__13__T_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lrn__13__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lrn__13__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lrn__13__T_tensor_float16(
    node_context *ctx
);

# endif