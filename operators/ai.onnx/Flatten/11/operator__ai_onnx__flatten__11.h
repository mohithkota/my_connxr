//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__FLATTEN__11_H
# define OPERATOR_OPERATOR__AI_ONNX__FLATTEN__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Flatten' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Flattens the input tensor into a 2D matrix. If input tensor has shape
 * (d_0, d_1, ... d_n) then the output will have shape
 * (d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).
 * 
 * Constraint T:
 *   Constrain input and output to all tensor types.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T input:
 *   A tensor of rank >= axis.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T output:
 *   A 2D tensor with the contents of the input tensor, with input dimensions
 *   up to axis flattened to the outer dimension of the output and remaining
 *   input dimensions flattened into the inner dimension of the output.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INT axis (optional):
 *   Indicate up to which input dimensions (exclusive) should be flattened to
 *   the outer dimension of the output. The value for axis must be in the range
 *   [-r, r], where r is the rank of the input tensor. Negative value means
 *   counting dimensions from the back. When axis = 0, the shape of the output
 *   tensor is (1, (d_0 X d_1 ... d_n), where the shape of the input tensor is
 *   (d_0, d_1, ... d_n).
 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/nn/old.cc:1679
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Flatten
 */

operator_status
prepare_operator__ai_onnx__flatten__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__flatten__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__flatten__11;

operator_executer
resolve_operator__ai_onnx__flatten__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__flatten__11__T_tensor_uint8(
    node_context *ctx
);

# endif