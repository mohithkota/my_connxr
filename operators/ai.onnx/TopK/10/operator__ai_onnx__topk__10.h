//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__TOPK__10_H
# define OPERATOR_OPERATOR__AI_ONNX__TOPK__10_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'TopK' version 10
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Retrieve the top-K elements along a specified axis. Given an input tensor of
 * shape [a_0, a_1, ..., a_{n-1}] and integer argument k, return two outputs:
 *   -Value tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}]
 *     which contains the values of the top k elements along the specified axis
 *   -Index tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}] which
 *    contains the indices of the top k elements (original indices from the input
 *    tensor).
 * 
 * Given two equivalent values, this operator uses the indices along the axis  as
 *  a tiebreaker. That is, the element with the lower index will appear first.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Constraint I:
 *   Constrain index tensor to int64
 *   Allowed Types: tensor_int64
 * Input T X:
 *   Tensor of shape [a_0, a_1, ..., a_{n-1}]
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input tensor(int64) K:
 *   A 1-D tensor containing a single positive value corresponding to the
 *   number of top elements to retrieve
 *   Allowed Types: tensor_int64
 * Output T Values:
 *   Tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}]
 *   containing top K values from the input tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output I Indices:
 *   Tensor of shape [a_0, a_1, ..., a_{axis-1}, k, a_{axis+1}, ... a_{n-1}]
 *   containing the corresponding input tensor indices for the top K values.
 *   Allowed Types: tensor_int64
 * Attribute INT axis (optional):
 *   Dimension on which to do the sort.
 *
 * @since version 10
 *
 * @see github/workspace/onnx/defs/math/old.cc:3698
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#TopK
 */

operator_status
prepare_operator__ai_onnx__topk__10(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__topk__10;

typedef struct {
// no attributes
} context_operator__ai_onnx__topk__10;

operator_executer
resolve_operator__ai_onnx__topk__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__topk__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__topk__10__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__topk__10__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__topk__10__T_tensor_float16(
    node_context *ctx
);

# endif