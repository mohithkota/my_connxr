//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__ARGMIN__1_H
# define OPERATOR_OPERATOR__AI_ONNX__ARGMIN__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'ArgMin' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Computes the indices of the min elements of the input tensor's element along the
 * provided axis. The resulting tensor has the same rank as the input if keepdims equals 1.
 * If keepdims equal 0, then the resulted tensor have the reduced dimension pruned.
 * The type of the output tensor is integer.
 * 
 * Constraint T:
 *   Constrain input and output types to all numeric tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input T data:
 *   An input tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output tensor(int64) reduced:
 *   Reduced output tensor with integer data type.
 *   Allowed Types: tensor_int64
 * Attribute INT axis (optional):
 *   The axis in which to compute the arg indices.
 * 
 * Attribute INT keepdims (optional):
 *   Keep the reduced dimension or not, default 1 means keep reduced
 *   dimension.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/reduction/old.cc:359
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#ArgMin
 */

operator_status
prepare_operator__ai_onnx__argmin__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__argmin__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__argmin__1;

operator_executer
resolve_operator__ai_onnx__argmin__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__argmin__1__T_tensor_uint8(
    node_context *ctx
);

# endif