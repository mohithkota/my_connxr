//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__GELU__20_H
# define OPERATOR_OPERATOR__AI_ONNX__GELU__20_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Gelu' version 20
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Gelu takes one input data (Tensor<T>) and produces one
 * output data (Tensor<T>) where the gaussian error linear units function,
 * $y = 0.5 * x * (1 + erf(x/sqrt(2)))$ is applied to the tensor elementwise.
 * If the attribute "approximate" is set to "tanh", the function estimation,
 * $y = 0.5 * x * (1 + Tanh(sqrt(2/\pi) * (x + 0.044715 * x^3)))$ is used and applied
 * to the tensor elementwise.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Input T X:
 *   Input tensor
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Output T Y:
 *   Output tensor
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Attribute STRING approximate (optional):
 *   Gelu approximation algorithm: `"tanh"`, `"none"`(default).`"none"`: do
 *   not use approximation.`"tanh"`: use tanh approximation.
 *
 * @since version 20
 *
 * @see github/workspace/onnx/defs/math/defs.cc:603
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Gelu
 */

operator_status
prepare_operator__ai_onnx__gelu__20(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__gelu__20;

typedef struct {
// no attributes
} context_operator__ai_onnx__gelu__20;

operator_executer
resolve_operator__ai_onnx__gelu__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gelu__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gelu__20__T_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gelu__20__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gelu__20__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gelu__20__T_tensor_float16(
    node_context *ctx
);

# endif