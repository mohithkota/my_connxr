//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__GATHER__1_H
# define OPERATOR_OPERATOR__AI_ONNX__GATHER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Gather' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Given `data` tensor of rank r >= 1, and `indices` tensor of rank q, gather
 * entries of the axis dimension of `data` (by default outer-most one as axis=0) indexed by `indices`, and concatenates
 * them in an output tensor of rank q + (r - 1).
 * Example 1:
 * ```
 *   data = [
 *       [1.0, 1.2],
 *       [2.3, 3.4],
 *       [4.5, 5.7],
 *   ]
 *   indices = [
 *       [0, 1],
 *       [1, 2],
 *   ]
 *   output = [
 *       [
 *           [1.0, 1.2],
 *           [2.3, 3.4],
 *       ],
 *       [
 *           [2.3, 3.4],
 *           [4.5, 5.7],
 *       ],
 *   ]
 * ```
 * Example 2:
 * ```
 *   data = [
 *       [1.0, 1.2, 1.9],
 *       [2.3, 3.4, 3.9],
 *       [4.5, 5.7, 5.9],
 *   ]
 *   indices = [
 *       [0, 2],
 *   ]
 *   axis = 1,
 *   output = [
 *       [[1.0, 1.9]],
 *       [[2.3, 3.9]],
 *       [[4.5, 5.9]],
 *   ]
 * ```
 * 
 * Constraint T:
 *   Constrain input and output types to any tensor type.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Constraint Tind:
 *   Constrain indices to integer types
 *   Allowed Types: tensor_int32, tensor_int64
 * Input T data:
 *   Tensor of rank r >= 1.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input Tind indices:
 *   Tensor of int32/int64 indices, of any rank q. All index values are
 *   expected to be within bounds. It is an error if any of the index values
 *   are out of bounds.
 *   Allowed Types: tensor_int32, tensor_int64
 * Output T output:
 *   Tensor of rank q + (r - 1).
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INT axis (optional):
 *   Which axis to gather on. Negative value means counting dimensions from
 *   the back. Accepted range is [-r, r-1]
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:5014
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Gather
 */

operator_status
prepare_operator__ai_onnx__gather__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__gather__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__gather__1;

operator_executer
resolve_operator__ai_onnx__gather__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_bool__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_bool__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_complex128__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_complex128__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_complex64__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_complex64__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_double__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_double__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_float__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_float__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_float16__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_float16__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int16__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int16__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int32__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int32__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int64__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int64__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int8__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_int8__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_string__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_string__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint16__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint16__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint32__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint32__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint64__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint64__Tind_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint8__Tind_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__gather__1__T_tensor_uint8__Tind_tensor_int64(
    node_context *ctx
);

# endif