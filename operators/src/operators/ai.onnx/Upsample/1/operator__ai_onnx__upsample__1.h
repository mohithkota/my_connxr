//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__UPSAMPLE__1_H
# define OPERATOR_OPERATOR__AI_ONNX__UPSAMPLE__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Upsample' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Upsample the input tensor.
 * The width and height of the output tensor are:
 *   output_width = floor(input_width * width_scale),
 *   output_height = floor(input_height * height_scale).
 * Example:
 *   Given `data` tensor, width_scale, height_scale, mode,
 *   Upsample the input 4-D tensor in nearest mode:
 *   data = [[[
 *       [1, 2],
 *       [3, 4]
 *   ]]]
 *   width_scale = 2
 *   height_scale = 2
 *   mode = "nearest"
 *   output = [[[
 *       [1, 1, 2, 2],
 *       [1, 1, 2, 2],
 *       [3, 3, 4, 4],
 *       [3, 3, 4, 4]
 *   ]]]
 * 
 * Constraint T:
 *   Constrain output types to bool, int32, int64, float16, float, double
 *   tensors.
 *   Allowed Types: tensor_bool, tensor_double, tensor_float, tensor_float16,
 *                  tensor_int32, tensor_int64
 * Input T X:
 *   4-D tensor, [N,C,H,W]
 *   Allowed Types: tensor_bool, tensor_double, tensor_float, tensor_float16,
 *                  tensor_int32, tensor_int64
 * Output T Y:
 *   4-D tensor after resizing, [N,C,H,W]
 *   Allowed Types: tensor_bool, tensor_double, tensor_float, tensor_float16,
 *                  tensor_int32, tensor_int64
 * Attribute FLOAT height_scale :
 *   The scale along height dimension. It takes value greater than or equal to
 *   1.
 * 
 * Attribute STRING mode (optional):
 *   Two interpolation modes: nearest(default), bilinear
 * 
 * Attribute FLOAT width_scale :
 *   The scale along width dimension. It takes value greater than or equal to
 *   1.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:4398
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Upsample
 */

operator_status
prepare_operator__ai_onnx__upsample__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__upsample__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__upsample__1;

operator_executer
resolve_operator__ai_onnx__upsample__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__1__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__1__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__1__T_tensor_int64(
    node_context *ctx
);

# endif