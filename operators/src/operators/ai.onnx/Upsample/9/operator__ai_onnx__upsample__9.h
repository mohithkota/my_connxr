//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__UPSAMPLE__9_H
# define OPERATOR_OPERATOR__AI_ONNX__UPSAMPLE__9_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Upsample' version 9
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Upsample the input tensor.
 * Each dimension value of the output tensor is:
 *   output_dimension = floor(input_dimension * scale).
 * 
 * Constraint T:
 *   Constrain input 'X' and output 'Y' to all tensor types.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T X:
 *   N-D tensor
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input tensor(float) scales:
 *   The scale array along each dimension. It takes value greater than or
 *   equal to 1. The number of elements of 'scales' should be the same as the
 *   rank of input 'X'.
 *   Allowed Types: tensor_float
 * Output T Y:
 *   N-D tensor after resizing
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute STRING mode (optional):
 *   Two interpolation modes: nearest (default), and linear (including
 *   bilinear, trilinear, etc)
 *
 * @since version 9
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:4494
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Upsample
 */

operator_status
prepare_operator__ai_onnx__upsample__9(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__upsample__9;

typedef struct {
// no attributes
} context_operator__ai_onnx__upsample__9;

operator_executer
resolve_operator__ai_onnx__upsample__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__upsample__9__T_tensor_uint8(
    node_context *ctx
);

# endif