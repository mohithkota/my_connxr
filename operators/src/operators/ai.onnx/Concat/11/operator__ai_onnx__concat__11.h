//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__CONCAT__11_H
# define OPERATOR_OPERATOR__AI_ONNX__CONCAT__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Concat' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Concatenate a list of tensors into a single tensor. All input tensors must have the same shape, except for the dimension size of the axis to concatenate on.
 * 
 * Constraint T:
 *   Constrain output types to any tensor type.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T inputs:
 *   List of tensors for concatenation
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T concat_result:
 *   Concatenated tensor
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INT axis :
 *   Which axis to concat on. A negative value means counting dimensions from
 *   the back. Accepted range is [-r, r-1] where r = rank(inputs)..
 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:1213
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Concat
 */

operator_status
prepare_operator__ai_onnx__concat__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__concat__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__concat__11;

operator_executer
resolve_operator__ai_onnx__concat__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concat__11__T_tensor_uint8(
    node_context *ctx
);

# endif