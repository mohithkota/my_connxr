//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__LPPOOL__22_H
# define OPERATOR_OPERATOR__AI_ONNX__LPPOOL__22_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'LpPool' version 22
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * LpPool consumes an input tensor X and applies Lp pooling across
 *  the tensor according to kernel sizes, stride sizes, and pad lengths.
 *  Lp pooling consisting of computing the Lp norm on all values of a subset
 *  of the input tensor according to the kernel size and downsampling the
 *  data into the output tensor Y for further processing. The output spatial shape will be following:
 *  ```
 *  output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - {kernelSpatialShape}) / strides_spatial_shape[i] + 1)
 *  ```
 *  or
 *  ```
 *  output_spatial_shape[i] = ceil((input_spatial_shape[i] + pad_shape[i] - {kernelSpatialShape}) / strides_spatial_shape[i] + 1)
 *  ```
 *  if ceil_mode is enabled `pad_shape[i]` is the sum of pads along axis `i`.
 * 
 *  `auto_pad` is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:
 *  ```
 *  VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - {kernelSpatialShape} + 1) / strides_spatial_shape[i])
 *  SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])
 *  ```
 *  And pad shape will be following if `SAME_UPPER` or `SAME_LOWER`:
 *  ```
 *  pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + {kernelSpatialShape} - input_spatial_shape[i]
 *  ```
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Input T X:
 *   Input data tensor from the previous operator; dimensions for image case
 *   are (N x C x H x W), where N is the batch size, C is the number of
 *   channels, and H and W are the height and the width of the data. For non
 *   image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn),
 *   where N is the batch size.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Output T Y:
 *   Output data tensor from Lp pooling across the input tensor. Dimensions
 *   will vary based on various kernel, stride, and pad sizes.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Attribute STRING auto_pad (optional):
 *   auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where
 *   default value is NOTSET, which means explicit padding is used. SAME_UPPER
 *   or SAME_LOWER mean pad the input so that `output_shape[i] =
 *   ceil(input_shape[i] / strides[i])` for each axis `i`. The padding is split
 *   between the two sides equally or almost equally (depending on whether it
 *   is even or odd). In case the padding is an odd number, the extra padding
 *   is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.
 * 
 * Attribute INT ceil_mode (optional):
 *   Whether to use ceil or floor (default) to compute the output shape.
 * 
 * Attribute INTS dilations (optional):
 *   dilation value along each spatial axis of the filter. If not present, the
 *   dilation defaults is 1 along each spatial axis.
 * 
 * Attribute INTS kernel_shape :
 *   The size of the kernel along each axis.
 * 
 * Attribute INT p (optional):
 *   p value of the Lp norm used to pool over the input data.
 * 
 * Attribute INTS pads (optional):
 *   Padding for the beginning and ending along each spatial axis, it can take
 *   any value greater than or equal to 0. The value represent the number of
 *   pixels added to the beginning and end part of the corresponding axis.
 *   `pads` format should be as follow [x1_begin, x2_begin...x1_end,
 *   x2_end,...], where xi_begin the number of pixels added at the beginning of
 *   axis `i` and xi_end, the number of pixels added at the end of axis `i`.
 *   This attribute cannot be used simultaneously with auto_pad attribute. If
 *   not present, the padding defaults to 0 along start and end of each spatial
 *   axis.
 * 
 * Attribute INTS strides (optional):
 *   Stride along each spatial axis. If not present, the stride defaults to 1
 *   along each spatial axis.
 *
 * @since version 22
 *
 * @see github/workspace/onnx/defs/nn/defs.cc:635
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#LpPool
 */

operator_status
prepare_operator__ai_onnx__lppool__22(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__lppool__22;

typedef struct {
// no attributes
} context_operator__ai_onnx__lppool__22;

operator_executer
resolve_operator__ai_onnx__lppool__22(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__22(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__22__T_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__22__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__22__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__lppool__22__T_tensor_float16(
    node_context *ctx
);

# endif