//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__MOD__10_H
# define OPERATOR_OPERATOR__AI_ONNX__MOD__10_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Mod' version 10
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Performs element-wise binary modulus (with Numpy-style broadcasting support).
 *     The sign of the remainder is the same as that of the Divisor.
 * 
 *     Mod operator can also behave like C fmod() or numpy.fmod. In this case, the sign of the remainder however, will be the same as the Dividend
 *     (in contrast to integer mod). To force a behavior like numpy.fmod() an 'fmod' Attribute is provided.
 *     This attribute is set to 0 by default causing the behavior to be like integer mod.
 *     Setting this attribute to 1 causes the remainder to be calculated similar to that of numpy.fmod().
 * 
 *     If the input type is floating point, then `fmod` attribute must be set to 1.
 * 
 *     In case of dividend being zero, the results will be platform dependent.
 * 
 *   This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).
 * 
 * Constraint T:
 *   Constrain input and output types to high-precision numeric tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input T A:
 *   Dividend tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input T B:
 *   Divisor tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output T C:
 *   Remainder tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INT fmod (optional):
 *   Whether the operator should behave like fmod (default=0 meaning it will
 *   do integer mods); Set this to 1 to force fmod treatment
 *
 * @since version 10
 *
 * @see github/workspace/onnx/defs/math/old.cc:1170
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Mod
 */

operator_status
prepare_operator__ai_onnx__mod__10(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__mod__10;

typedef struct {
// no attributes
} context_operator__ai_onnx__mod__10;

operator_executer
resolve_operator__ai_onnx__mod__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__mod__10__T_tensor_uint8(
    node_context *ctx
);

# endif