//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__BATCHNORMALIZATION__7_H
# define OPERATOR_OPERATOR__AI_ONNX__BATCHNORMALIZATION__7_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'BatchNormalization' version 7
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Carries out batch normalization as described in the paper
 *     https://arxiv.org/abs/1502.03167. Depending on the mode it is being run,
 *     there are multiple cases for the number of outputs, which we list below:
 * 
 *     Output case #1: Y, mean, var, saved_mean, saved_var (training mode)
 *     Output case #2: Y (test mode)
 *         This operator has **optional** inputs/outputs. See [the doc](IR.md) for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T X:
 *   Input data tensor from the previous operator; dimensions for image case
 *   are (N x C x H x W), where N is the batch size, C is the number of
 *   channels, and H and W are the height and the width of the data. For non
 *   image case, the dimensions are in the form of (N x C x D1 x D2 ... Dn),
 *   where N is the batch size.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T scale:
 *   If spatial is true, the dimension of scale is (C). If spatial is false,
 *   the dimensions of scale are (C x D1 x ... x Dn)
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T B:
 *   If spatial is true, the dimension of bias is (C). If spatial is false,
 *   the dimensions of bias are (C x D1 x ... x Dn)
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T mean:
 *   If spatial is true, the dimension of the running mean (training) or the
 *   estimated mean (testing) is (C). If spatial is false, the dimensions of
 *   the running mean (training) or the estimated mean (testing) are (C x D1 x
 *   ... x Dn).
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T var:
 *   If spatial is true, the dimension of the running variance(training) or
 *   the estimated variance (testing) is (C). If spatial is false, the
 *   dimensions of the running variance(training) or the estimated variance
 *   (testing) are (C x D1 x ... x Dn).
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   The output tensor of the same shape as X
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T mean:
 *   The running mean after the BatchNormalization operator.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T var:
 *   The running variance after the BatchNormalization operator.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T saved_mean:
 *   Saved mean used during training to speed up gradient computation.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T saved_var:
 *   Saved variance used during training to speed up gradient computation.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute FLOAT epsilon (optional):
 *   The epsilon value to use to avoid division by zero.
 * 
 * Attribute FLOAT momentum (optional):
 *   Factor used in computing the running mean and variance.e.g., running_mean
 *   = running_mean * momentum + mean * (1 - momentum).
 * 
 * Attribute INT spatial (optional):
 *   If true, compute the mean and variance across per activation. If false,
 *   compute the mean and variance across per feature over each mini-batch.
 *
 * @since version 7
 *
 * @see github/workspace/onnx/defs/nn/old.cc:3863
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#BatchNormalization
 */

operator_status
prepare_operator__ai_onnx__batchnormalization__7(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__batchnormalization__7;

typedef struct {
// no attributes
} context_operator__ai_onnx__batchnormalization__7;

operator_executer
resolve_operator__ai_onnx__batchnormalization__7(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__7(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__7__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__7__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__7__T_tensor_float16(
    node_context *ctx
);

# endif