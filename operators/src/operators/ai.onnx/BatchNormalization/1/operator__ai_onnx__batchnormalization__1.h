//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__BATCHNORMALIZATION__1_H
# define OPERATOR_OPERATOR__AI_ONNX__BATCHNORMALIZATION__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'BatchNormalization' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Carries out batch normalization as described in the paper
 * https://arxiv.org/abs/1502.03167. Depending on the mode it is being run,
 * there are multiple cases for the number of outputs, which we list below:
 * 
 * Output case #1: Y, mean, var, saved_mean, saved_var (training mode)
 * Output case #2: Y (test mode)
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T X:
 *   The input 4-dimensional tensor of shape NCHW.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T scale:
 *   The scale as a 1-dimensional tensor of size C to be applied to the
 *   output.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T B:
 *   The bias as a 1-dimensional tensor of size C to be applied to the output.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T mean:
 *   The running mean (training) or the estimated mean (testing) as a
 *   1-dimensional tensor of size C.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Input T var:
 *   The running variance (training) or the estimated variance (testing) as a
 *   1-dimensional tensor of size C.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   The output 4-dimensional tensor of the same shape as X.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T mean:
 *   The running mean after the BatchNormalization operator. Must be in-place
 *   with the input mean. Should not be used for testing.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T var:
 *   The running variance after the BatchNormalization operator. Must be
 *   in-place with the input var. Should not be used for testing.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T saved_mean:
 *   Saved mean used during training to speed up gradient computation. Should
 *   not be used for testing.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * 
 * Output T saved_var:
 *   Saved variance used during training to speed up gradient computation.
 *   Should not be used for testing.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute INTS consumed_inputs :
 *   legacy optimization attribute.
 * 
 * Attribute FLOAT epsilon (optional):
 *   The epsilon value to use to avoid division by zero, default is 1e-5f.
 * 
 * Attribute INT is_test (optional):
 *   If set to nonzero, run spatial batch normalization in test mode, default
 *   is 0.
 * 
 * Attribute FLOAT momentum (optional):
 *   Factor used in computing the running mean and variance.e.g., running_mean
 *   = running_mean * momentum + mean * (1 - momentum), default is 0.9f.
 * 
 * Attribute INT spatial (optional):
 *   If true, compute the mean and variance across all spatial elements If
 *   false, compute the mean and variance across per feature.Default is 1.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/nn/old.cc:3116
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#BatchNormalization
 */

operator_status
prepare_operator__ai_onnx__batchnormalization__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__batchnormalization__1;

typedef struct {
// no attributes
} context_operator__ai_onnx__batchnormalization__1;

operator_executer
resolve_operator__ai_onnx__batchnormalization__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__batchnormalization__1__T_tensor_float16(
    node_context *ctx
);

# endif