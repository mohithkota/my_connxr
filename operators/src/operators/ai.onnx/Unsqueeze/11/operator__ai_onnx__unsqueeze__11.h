//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__UNSQUEEZE__11_H
# define OPERATOR_OPERATOR__AI_ONNX__UNSQUEEZE__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Unsqueeze' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Insert single-dimensional entries to the shape of an input tensor (`data`).
 * Takes one required argument `axes` - which contains a list of dimension indices and this operator will insert a dimension of value `1` into the corresponding index of the output tensor (`expanded`).
 * 
 * For example:
 *   Given an input tensor (`data`) of shape [3, 4, 5], then
 *   Unsqueeze(data, axes=[0, 4]) outputs a tensor (`expanded`) containing same data as `data` but with shape [1, 3, 4, 5, 1].
 * 
 * The attribute `axes` should not contain any duplicate entries. It is an error if it contains duplicates.
 * The rank of the output tensor (`output_rank`) is the rank of the input tensor (`data`) plus the number of values in `axes`.
 * Each value in `axes` should be within the (inclusive) range [-output_rank , output_rank - 1].
 * The order of values in `axes` does not matter and can come in any order.
 * 
 * Constraint T:
 *   Constrain input and output types to all tensor types.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T data:
 *   Original tensor
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T expanded:
 *   Reshaped tensor with same data as input.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INTS axes :
 *   List of integers indicating the dimensions to be inserted. Negative value
 *   means counting dimensions from the back. Accepted range is [-r, r-1] where
 *   r = rank(expanded).
 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:2887
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Unsqueeze
 */

operator_status
prepare_operator__ai_onnx__unsqueeze__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__unsqueeze__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__unsqueeze__11;

operator_executer
resolve_operator__ai_onnx__unsqueeze__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__unsqueeze__11__T_tensor_uint8(
    node_context *ctx
);

# endif