//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__HARDMAX__13_H
# define OPERATOR_OPERATOR__AI_ONNX__HARDMAX__13_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Hardmax' version 13
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * The operator computes the hardmax values for the given input:
 * 
 *  Hardmax(element in input, axis) = 1 if the element is the first maximum value along the specified axis, 0 otherwise
 * 
 * The "axis" attribute indicates the dimension along which Hardmax
 * will be performed. The output tensor has the same shape
 * and contains the Hardmax values of the corresponding input.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Input T input:
 *   The input tensor of rank >= axis.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Output T output:
 *   The output values with the same shape as the input tensor.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Attribute INT axis (optional):
 *   Describes the dimension Hardmax will be performed on. Negative value
 *   means counting dimensions from the back. Accepted range is [-r, r-1] where
 *   r = rank(input).
 *
 * @since version 13
 *
 * @see github/workspace/onnx/defs/math/defs.cc:1192
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Hardmax
 */

operator_status
prepare_operator__ai_onnx__hardmax__13(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__hardmax__13;

typedef struct {
// no attributes
} context_operator__ai_onnx__hardmax__13;

operator_executer
resolve_operator__ai_onnx__hardmax__13(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__hardmax__13(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__hardmax__13__T_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__hardmax__13__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__hardmax__13__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__hardmax__13__T_tensor_float16(
    node_context *ctx
);

# endif