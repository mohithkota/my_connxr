//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__GROUPNORMALIZATION__18_H
# define OPERATOR_OPERATOR__AI_ONNX__GROUPNORMALIZATION__18_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'GroupNormalization' version 18
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * A GroupNormalization function. Carries out group normalization as described in
 * the paper https://arxiv.org/abs/1803.08494
 * 
 * This operator transforms input according to
 * ```
 * y = scale * (x - mean) / sqrt(variance + epsilon) + bias,
 * ```
 * where the mean and variance are computed per instance per group of channels, and
 * `scale` and `bias` should be specified for each group of channels. The number of
 * groups `num_groups` should be divisible by the number of channels so that there are
 * an equal number of channels per group.
 * 
 * When the number of groups is the same as the number of channels, this operator is
 * equivalent to InstanceNormalization. When there is only one group, this operator
 * is equivalent to LayerNormalization.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Input T X:
 *   Input data tensor. Dimensions for image cases are `(N x C x H x W)`,
 *   where `N` is the batch size, `C` is the number of channels, and `H` and
 *   `W` are the height and width of the data. Statistics are computed for
 *   every group of channels over `C`, `H`, and `W`. For non-image cases, the
 *   dimensions are in the form of `(N x C x D1 x D2 ... Dn)`.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * 
 * Input T scale:
 *   Scale tensor of shape `(num_groups)`.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * 
 * Input T bias:
 *   Bias tensor of shape `(num_groups)`.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Output T Y:
 *   The output tensor of the same shape as `X`.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Attribute FLOAT epsilon (optional):
 *   The epsilon value to use to avoid division by zero.
 * 
 * Attribute INT num_groups :
 *   The number of groups of channels. It should be a divisor of the number of
 *   channels `C`.
 *
 * @since version 18
 *
 * @see github/workspace/onnx/defs/nn/old.cc:3970
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#GroupNormalization
 */

operator_status
prepare_operator__ai_onnx__groupnormalization__18(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__groupnormalization__18;

typedef struct {
// no attributes
} context_operator__ai_onnx__groupnormalization__18;

operator_executer
resolve_operator__ai_onnx__groupnormalization__18(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__groupnormalization__18(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__groupnormalization__18__T_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__groupnormalization__18__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__groupnormalization__18__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__groupnormalization__18__T_tensor_float16(
    node_context *ctx
);

# endif