//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__CONCATFROMSEQUENCE__11_H
# define OPERATOR_OPERATOR__AI_ONNX__CONCATFROMSEQUENCE__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'ConcatFromSequence' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Concatenate a sequence of tensors into a single tensor.
 * All input tensors must have the same shape, except for the dimension size of the axis to concatenate on.
 * By default 'new_axis' is 0, the behavior is similar to numpy.concatenate.
 * When 'new_axis' is 1, the behavior is similar to numpy.stack.
 * 
 * Constraint S:
 *   Constrain input types to any tensor type.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * 
 * Constraint T:
 *   Constrain output types to any tensor type.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input S input_sequence:
 *   Sequence of tensors for concatenation
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * Output T concat_result:
 *   Concatenated tensor
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INT axis :
 *   Which axis to concat on. Accepted range in `[-r, r - 1]`, where `r` is
 *   the rank of input tensors. When `new_axis` is 1, accepted range is `[-r -
 *   1, r]`.
 * 
 * Attribute INT new_axis (optional):
 *   Insert and concatenate on a new axis or not, default 0 means do not
 *   insert new axis.
 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/sequence/defs.cc:435
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#ConcatFromSequence
 */

operator_status
prepare_operator__ai_onnx__concatfromsequence__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__concatfromsequence__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__concatfromsequence__11;

operator_executer
resolve_operator__ai_onnx__concatfromsequence__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__concatfromsequence__11__S_seq_tensor_uint8(
    node_context *ctx
);

# endif