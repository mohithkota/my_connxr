//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__MULTINOMIAL__22_H
# define OPERATOR_OPERATOR__AI_ONNX__MULTINOMIAL__22_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Multinomial' version 22
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Generate a tensor of samples from a multinomial distribution according to the probabilities
 * of each of the possible outcomes.
 * 
 * Constraint T1:
 *   Constrain input types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * 
 * Constraint T2:
 *   Constrain output types to integral tensors.
 *   Allowed Types: tensor_int32, tensor_int64
 * Input T1 input:
 *   Input tensor with shape [batch_size, class_size], where class_size is the
 *   number of all possible outcomes. Each value along the axis zero represents
 *   the unnormalized log-probability of each corresponding outcome in a batch.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Output T2 output:
 *   Output tensor with shape [batch_size, sample_size], where sample_size is
 *   the number of times to sample. Each value along the axis zero represents
 *   the outcome of the corresponding sample in a batch.
 *   Allowed Types: tensor_int32, tensor_int64
 * Attribute INT dtype (optional):
 *   (Optional) The data type for the elements of the output tensor, if not
 *   specified, we will use int32.
 * 
 * Attribute INT sample_size (optional):
 *   Number of times to sample.
 * 
 * Attribute FLOAT seed (optional):
 *   (Optional) Seed to the random generator, if not specified we will auto
 *   generate one.
 *
 * @since version 22
 *
 * @see github/workspace/onnx/defs/generator/defs.cc:349
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Multinomial
 */

operator_status
prepare_operator__ai_onnx__multinomial__22(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__multinomial__22;

typedef struct {
// no attributes
} context_operator__ai_onnx__multinomial__22;

operator_executer
resolve_operator__ai_onnx__multinomial__22(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__multinomial__22(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__multinomial__22__T1_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__multinomial__22__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__multinomial__22__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__multinomial__22__T1_tensor_float16(
    node_context *ctx
);

# endif