//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__TRILU__14_H
# define OPERATOR_OPERATOR__AI_ONNX__TRILU__14_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Trilu' version 14
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Given a 2-D matrix or batches of 2-D matrices, returns the upper or lower triangular part of the tensor(s).
 * The attribute "upper" determines whether the upper or lower part is retained. If set to true,
 * the upper triangular matrix is retained. Lower triangular matrix is retained otherwise.
 * Default value for the "upper" attribute is true.
 * Trilu takes one input tensor of shape [*, N, M], where * is zero or more batch dimensions. The upper triangular part consists
 * of the elements on and above the given diagonal (k). The lower triangular part consists of elements on and below the diagonal.
 * All other elements in the matrix are set to zero.
 * If k = 0, the triangular part on and above/below the main diagonal is retained.
 * If upper is set to true, a positive k retains the upper triangular matrix excluding the main diagonal and (k-1) diagonals above it.
 * A negative k value retains the main diagonal and |k| diagonals below it.
 * If upper is set to false, a positive k retains the lower triangular matrix including the main diagonal and k diagonals above it.
 * A negative k value excludes the main diagonal and (|k|-1) diagonals below it.
 * 
 * Constraint T:
 *   Constrain input and output types to all tensor types.
 *   Allowed Types: tensor_bfloat16, tensor_bool, tensor_complex128,
 *                  tensor_complex64, tensor_double, tensor_float,
 *                  tensor_float16, tensor_int16, tensor_int32, tensor_int64,
 *                  tensor_int8, tensor_string, tensor_uint16, tensor_uint32,
 *                  tensor_uint64, tensor_uint8
 * Input T input:
 *   Input tensor of rank 2 or higher.
 *   Allowed Types: tensor_bfloat16, tensor_bool, tensor_complex128,
 *                  tensor_complex64, tensor_double, tensor_float,
 *                  tensor_float16, tensor_int16, tensor_int32, tensor_int64,
 *                  tensor_int8, tensor_string, tensor_uint16, tensor_uint32,
 *                  tensor_uint64, tensor_uint8
 * 
 * Input tensor(int64) k:
 *   A 0-D tensor containing a single value corresponding to the number
 *   diagonals above or below the main diagonal to exclude or include. Default
 *   value is 0 if it's not specified.
 *   Allowed Types: tensor_int64
 * Output T output:
 *   Output tensor of the same type and shape as the input tensor.
 *   Allowed Types: tensor_bfloat16, tensor_bool, tensor_complex128,
 *                  tensor_complex64, tensor_double, tensor_float,
 *                  tensor_float16, tensor_int16, tensor_int32, tensor_int64,
 *                  tensor_int8, tensor_string, tensor_uint16, tensor_uint32,
 *                  tensor_uint64, tensor_uint8
 * Attribute INT upper (optional):
 *   Boolean. Indicates whether upper or lower part of matrix is retained.
 *   Default is true.
 *
 * @since version 14
 *
 * @see github/workspace/onnx/defs/tensor/defs.cc:3693
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Trilu
 */

operator_status
prepare_operator__ai_onnx__trilu__14(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__trilu__14;

typedef struct {
// no attributes
} context_operator__ai_onnx__trilu__14;

operator_executer
resolve_operator__ai_onnx__trilu__14(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__trilu__14__T_tensor_uint8(
    node_context *ctx
);

# endif