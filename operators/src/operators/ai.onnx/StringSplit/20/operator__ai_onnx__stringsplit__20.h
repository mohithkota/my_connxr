//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__STRINGSPLIT__20_H
# define OPERATOR_OPERATOR__AI_ONNX__STRINGSPLIT__20_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'StringSplit' version 20
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * StringSplit splits a string tensor's elements into substrings based on a delimiter attribute and a maxsplit attribute.
 * 
 * The first output of this operator is a tensor of strings representing the substrings from splitting each input string on the `delimiter` substring. This tensor has one additional rank compared to the input tensor in order to store the substrings for each input element (where the input tensor is not empty). Note that, in order to ensure the same number of elements are present in the final dimension, this tensor will pad empty strings as illustrated in the examples below. Consecutive delimiters are not grouped together and are deemed to delimit empty strings, except if the `delimiter` is unspecified or is the empty string (""). In the case where the `delimiter` is unspecified or the empty string, consecutive whitespace characters are regarded as a single separator and leading or trailing whitespace is removed in the output.
 * 
 * The second output tensor represents the number of substrings generated. `maxsplit` can be used to limit the number of splits performed - after the `maxsplit`th split if the string is not fully split, the trailing suffix of input string after the final split point is also added. For elements where fewer splits are possible than specified in `maxsplit`, it has no effect.
 * 
 * Constraint T1:
 *   The input must be a UTF-8 string tensor
 *   Allowed Types: tensor_string
 * 
 * Constraint T2:
 *   Tensor of substrings.
 *   Allowed Types: tensor_string
 * 
 * Constraint T3:
 *   The number of substrings generated.
 *   Allowed Types: tensor_int64
 * Input T1 X:
 *   Tensor of strings to split.
 *   Allowed Types: tensor_string
 * Output T2 Y:
 *   Tensor of substrings representing the outcome of splitting the strings in
 *   the input on the delimiter. Note that to ensure the same number of
 *   elements are present in the final rank, this tensor will pad any necessary
 *   empty strings.
 *   Allowed Types: tensor_string
 * 
 * Output T3 Z:
 *   The number of substrings generated for each input element.
 *   Allowed Types: tensor_int64
 * Attribute STRING delimiter (optional):
 *   Delimiter to split on. If left unset or set to the empty string (""), the
 *   input is split on consecutive whitespace.
 * 
 * Attribute INT maxsplit (optional):
 *   Maximum number of splits (from left to right). If left unset (or if the
 *   number of possible splits are less than maxsplit), it will make as many
 *   splits as possible. Note that the maximum possible number of substrings
 *   returned with `maxsplit` specified is `maxsplit+1` since the remaining
 *   suffix after the `maxsplit`th split is included in the output.
 *
 * @since version 20
 *
 * @see github/workspace/onnx/defs/text/defs.cc:71
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#StringSplit
 */

operator_status
prepare_operator__ai_onnx__stringsplit__20(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__stringsplit__20;

typedef struct {
// no attributes
} context_operator__ai_onnx__stringsplit__20;

operator_executer
resolve_operator__ai_onnx__stringsplit__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__stringsplit__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__stringsplit__20__T1_tensor_string(
    node_context *ctx
);

# endif