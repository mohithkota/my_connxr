//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__EXPAND__8_H
# define OPERATOR_OPERATOR__AI_ONNX__EXPAND__8_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Expand' version 8
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Broadcast the input tensor following the given shape and the broadcast rule.
 * The broadcast rule is similar to numpy.array(input) * numpy.ones(shape):
 * Dimensions are right alignment;
 * Two corresponding dimensions must have the same value, or one of them is equal to 1.
 * Also, this operator is similar to numpy.broadcast_to(input, shape),
 * but the major difference is numpy.broadcast_to() does not allow shape to be smaller than input.size().
 * It is possible that the output.shape is not equal to shape, when some dimensions in shape is equal to 1,
 * or the shape.ndim < input.shape.ndim.
 * 
 * Constraint T:
 *   Constrain input and output types to all tensors.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T input:
 *   Input tensor
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input tensor(int64) shape:
 *   A 1-D tensor indicates the shape you want to expand to, following the
 *   broadcast rule
 *   Allowed Types: tensor_int64
 * Output T output:
 *   Output tensor
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8

 *
 * @since version 8
 *
 * @see github/workspace/onnx/defs/math/old.cc:1809
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Expand
 */

operator_status
prepare_operator__ai_onnx__expand__8(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__expand__8;

typedef struct {
// no attributes
} context_operator__ai_onnx__expand__8;

operator_executer
resolve_operator__ai_onnx__expand__8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__expand__8__T_tensor_uint8(
    node_context *ctx
);

# endif