//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__REGEXFULLMATCH__20_H
# define OPERATOR_OPERATOR__AI_ONNX__REGEXFULLMATCH__20_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'RegexFullMatch' version 20
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * RegexFullMatch performs a full regex match on each element of the input tensor. If an element fully matches the regex pattern specified as an attribute, the corresponding element in the output is True and it is False otherwise. [RE2](https://github.com/google/re2/wiki/Syntax) regex syntax is used.
 * 
 * Constraint T1:
 *   Inputs must be UTF-8 strings
 *   Allowed Types: tensor_string
 * 
 * Constraint T2:
 *   Outputs are bools and are True where there is a full regex match and
 *   False otherwise.
 *   Allowed Types: tensor_bool
 * Input T1 X:
 *   Tensor with strings to match on.
 *   Allowed Types: tensor_string
 * Output T2 Y:
 *   Tensor of bools indicating if each input string fully matches the regex
 *   pattern specified.
 *   Allowed Types: tensor_bool
 * Attribute STRING pattern (optional):
 *   Regex pattern to match on. This must be valid RE2 syntax.
 *
 * @since version 20
 *
 * @see github/workspace/onnx/defs/text/defs.cc:38
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#RegexFullMatch
 */

operator_status
prepare_operator__ai_onnx__regexfullmatch__20(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__regexfullmatch__20;

typedef struct {
// no attributes
} context_operator__ai_onnx__regexfullmatch__20;

operator_executer
resolve_operator__ai_onnx__regexfullmatch__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__regexfullmatch__20(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__regexfullmatch__20__T1_tensor_string(
    node_context *ctx
);

# endif