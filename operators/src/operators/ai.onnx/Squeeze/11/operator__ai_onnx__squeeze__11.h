//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SQUEEZE__11_H
# define OPERATOR_OPERATOR__AI_ONNX__SQUEEZE__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Squeeze' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Remove single-dimensional entries from the shape of a tensor.
 * Takes a  parameter `axes` with a list of axes to squeeze.
 * If `axes` is not provided, all the single dimensions will be removed from
 * the shape. If an axis is selected with shape entry not equal to one, an error is raised.
 * 
 * Constraint T:
 *   Constrain input and output types to all tensor types.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T data:
 *   Tensors with at least max(dims) dimensions.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T squeezed:
 *   Reshaped tensor with same data as input.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INTS axes (optional):
 *   List of integers indicating the dimensions to squeeze. Negative value
 *   means counting dimensions from the back. Accepted range is [-r, r-1] where
 *   r = rank(data).
 *
 * @since version 11
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:2736
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Squeeze
 */

operator_status
prepare_operator__ai_onnx__squeeze__11(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__squeeze__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__squeeze__11;

operator_executer
resolve_operator__ai_onnx__squeeze__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_complex128(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_complex64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_string(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__squeeze__11__T_tensor_uint8(
    node_context *ctx
);

# endif