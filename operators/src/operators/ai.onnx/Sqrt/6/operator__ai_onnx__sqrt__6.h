//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SQRT__6_H
# define OPERATOR_OPERATOR__AI_ONNX__SQRT__6_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Sqrt' version 6
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Square root takes one input data (Tensor<T>) and produces one output data
 * (Tensor<T>) where the square root is, y = x^0.5, is applied to
 * the tensor elementwise. If x is negative, then it will return NaN.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T X:
 *   Input tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   Output tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16

 *
 * @since version 6
 *
 * @see github/workspace/onnx/defs/math/old.cc:1300
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Sqrt
 */

operator_status
prepare_operator__ai_onnx__sqrt__6(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__sqrt__6;

typedef struct {
// no attributes
} context_operator__ai_onnx__sqrt__6;

operator_executer
resolve_operator__ai_onnx__sqrt__6(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sqrt__6(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sqrt__6__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sqrt__6__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__sqrt__6__T_tensor_float16(
    node_context *ctx
);

# endif