//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__BERNOULLI__22_H
# define OPERATOR_OPERATOR__AI_ONNX__BERNOULLI__22_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Bernoulli' version 22
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Draws binary random numbers (0 or 1) from a Bernoulli distribution. The input tensor should be a tensor
 * containing probabilities p (a value in the range [0,1]) to be used for drawing the binary random number,
 * where an output of 1 is produced with probability p and an output of 0 is produced with probability (1-p).
 * 
 * This operator is non-deterministic and may not produce the same values in different
 * implementations (even if a seed is specified).
 * 
 * Constraint T1:
 *   Constrain input types to float tensors.
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * 
 * Constraint T2:
 *   Constrain output types to all numeric tensors and bool tensors.
 *   Allowed Types: tensor_bfloat16, tensor_bool, tensor_double, tensor_float,
 *                  tensor_float16, tensor_int16, tensor_int32, tensor_int64,
 *                  tensor_int8, tensor_uint16, tensor_uint32, tensor_uint64,
 *                  tensor_uint8
 * Input T1 input:
 *   All values in input have to be in the range:[0, 1].
 *   Allowed Types: tensor_bfloat16, tensor_double, tensor_float,
 *                  tensor_float16
 * Output T2 output:
 *   The returned output tensor only has values 0 or 1, same shape as input
 *   tensor.
 *   Allowed Types: tensor_bfloat16, tensor_bool, tensor_double, tensor_float,
 *                  tensor_float16, tensor_int16, tensor_int32, tensor_int64,
 *                  tensor_int8, tensor_uint16, tensor_uint32, tensor_uint64,
 *                  tensor_uint8
 * Attribute INT dtype (optional):
 *   The data type for the elements of the output tensor. if not specified, we
 *   will use the data type of the input tensor.
 * 
 * Attribute FLOAT seed (optional):
 *   (Optional) Seed to the random generator, if not specified we will auto
 *   generate one.
 *
 * @since version 22
 *
 * @see github/workspace/onnx/defs/generator/defs.cc:537
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Bernoulli
 */

operator_status
prepare_operator__ai_onnx__bernoulli__22(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__bernoulli__22;

typedef struct {
// no attributes
} context_operator__ai_onnx__bernoulli__22;

operator_executer
resolve_operator__ai_onnx__bernoulli__22(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bernoulli__22(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bernoulli__22__T1_tensor_bfloat16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bernoulli__22__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bernoulli__22__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__bernoulli__22__T1_tensor_float16(
    node_context *ctx
);

# endif