//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__EYELIKE__9_H
# define OPERATOR_OPERATOR__AI_ONNX__EYELIKE__9_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'EyeLike' version 9
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Generate a 2D tensor (matrix) with ones on the diagonal and zeros everywhere else. Only 2D
 * tensors are supported, i.e. input T1 must be of rank 2. The shape of the output tensor is the
 * same as the input tensor. The data type can be specified by the 'dtype' argument. If
 * 'dtype' is not specified, then the type of input tensor is used. By default, the main diagonal
 * is populated with ones, but attribute 'k' can be used to populate upper or lower diagonals.
 * The 'dtype' argument must be one of the data types specified in the 'DataType' enum field in the
 * TensorProto message and be valid as an output type.
 * 
 * Constraint T1:
 *   Constrain input types. Strings and complex are not supported.
 *   Allowed Types: tensor_bool, tensor_double, tensor_float, tensor_float16,
 *                  tensor_int16, tensor_int32, tensor_int64, tensor_int8,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Constraint T2:
 *   Constrain output types. Strings and complex are not supported.
 *   Allowed Types: tensor_bool, tensor_double, tensor_float, tensor_float16,
 *                  tensor_int16, tensor_int32, tensor_int64, tensor_int8,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T1 input:
 *   2D input tensor to copy shape, and optionally, type information from.
 *   Allowed Types: tensor_bool, tensor_double, tensor_float, tensor_float16,
 *                  tensor_int16, tensor_int32, tensor_int64, tensor_int8,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T2 output:
 *   Output tensor, same shape as input tensor T1.
 *   Allowed Types: tensor_bool, tensor_double, tensor_float, tensor_float16,
 *                  tensor_int16, tensor_int32, tensor_int64, tensor_int8,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INT dtype (optional):
 *   (Optional) The data type for the elements of the output tensor. If not
 *   specified,the data type of the input tensor T1 is used. If input tensor T1
 *   is also notspecified, then type defaults to 'float'.
 * 
 * Attribute INT k (optional):
 *   (Optional) Index of the diagonal to be populated with ones. Default is 0.
 *   If T2 is the output, this op sets T2[i, i+k] = 1. k = 0 populates the main
 *   diagonal, k > 0 populates an upper diagonal, and k < 0 populates a lower
 *   diagonal.
 *
 * @since version 9
 *
 * @see github/workspace/onnx/defs/generator/old.cc:336
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#EyeLike
 */

operator_status
prepare_operator__ai_onnx__eyelike__9(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__eyelike__9;

typedef struct {
// no attributes
} context_operator__ai_onnx__eyelike__9;

operator_executer
resolve_operator__ai_onnx__eyelike__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_bool(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_float16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_int16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_int8(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_uint16(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_uint32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_uint64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__eyelike__9__T1_tensor_uint8(
    node_context *ctx
);

# endif