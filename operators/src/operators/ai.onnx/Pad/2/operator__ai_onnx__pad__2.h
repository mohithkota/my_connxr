//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__PAD__2_H
# define OPERATOR_OPERATOR__AI_ONNX__PAD__2_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Pad' version 2
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Given `data` tensor, pads, mode, and value.
 * Example:
 *   Insert 0 pads to the beginning of the second dimension.
 *   data = [
 *       [1.0, 1.2],
 *       [2.3, 3.4],
 *       [4.5, 5.7],
 *   ]
 *   pads = [0, 2, 0, 0]
 *   output = [
 *       [
 *           [0.0, 0.0, 1.0, 1.2],
 *           [0.0, 0.0, 2.3, 3.4],
 *           [0.0, 0.0, 4.5, 5.7],
 *       ],
 *   ]
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T data:
 *   Input tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T output:
 *   Tensor after padding.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute STRING mode (optional):
 *   Three modes: constant(default), reflect, edge
 * 
 * Attribute INTS pads :
 *   List of integers indicating the number of padding elements to add or
 *   remove (if negative) at the beginning and end of each axis. For 2D it is
 *   the number of pixels. `pads` rank should be double of the input's rank.
 *   `pads` format should be as follow [x1_begin, x2_begin...x1_end,
 *   x2_end,...], where xi_begin the number of pixels added at the beginning of
 *   axis `i` and xi_end, the number of pixels added at the end of axis `i`.
 * 
 * Attribute FLOAT value (optional):
 *   One float, indicates the value to be filled.
 *
 * @since version 2
 *
 * @see github/workspace/onnx/defs/tensor/old.cc:5453
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Pad
 */

operator_status
prepare_operator__ai_onnx__pad__2(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__pad__2;

typedef struct {
// no attributes
} context_operator__ai_onnx__pad__2;

operator_executer
resolve_operator__ai_onnx__pad__2(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__2(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__2__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__2__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx__pad__2__T_tensor_float16(
    node_context *ctx
);

# endif