//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__FEATUREVECTORIZER__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__FEATUREVECTORIZER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'FeatureVectorizer' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Concatenates input tensors into one continuous output.<br>
 *     All input shapes are 2-D and are concatenated along the second dimension. 1-D tensors are treated as [1,C].
 *     Inputs are copied to the output maintaining the order of the input arguments.<br>
 *     All inputs must be integers or floats, while the output will be all floating point values.
 * 
 * Constraint T1:
 *   The input type must be a tensor of a numeric type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Input T1 X:
 *   An ordered collection of tensors, all with the same element type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output tensor(float) Y:
 *   The output array, elements ordered as the inputs.
 *   Allowed Types: tensor_float
 * Attribute INTS inputdimensions (optional):
 *   The size of each input in the input list
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:269
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#FeatureVectorizer
 */

operator_status
prepare_operator__ai_onnx_ml__featurevectorizer__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__featurevectorizer__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__featurevectorizer__1;

operator_executer
resolve_operator__ai_onnx_ml__featurevectorizer__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__featurevectorizer__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__featurevectorizer__1__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__featurevectorizer__1__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__featurevectorizer__1__T1_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__featurevectorizer__1__T1_tensor_int64(
    node_context *ctx
);

# endif