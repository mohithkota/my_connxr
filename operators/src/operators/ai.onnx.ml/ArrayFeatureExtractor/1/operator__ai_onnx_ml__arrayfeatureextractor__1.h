//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__ARRAYFEATUREEXTRACTOR__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__ARRAYFEATUREEXTRACTOR__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'ArrayFeatureExtractor' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Select elements of the input tensor based on the indices passed.<br>
 *     The indices are applied to the last axes of the tensor.
 * 
 * Constraint T:
 *   The input must be a tensor of a numeric type or string. The output will
 *   be of the same tensor type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64,
 *                  tensor_string
 * Input T X:
 *   Data to be selected
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64,
 *                  tensor_string
 * 
 * Input tensor(int64) Y:
 *   The indices, based on 0 as the first index of any dimension.
 *   Allowed Types: tensor_int64
 * Output T Z:
 *   Selected output data as an array
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64,
 *                  tensor_string

 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:15
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#ArrayFeatureExtractor
 */

operator_status
prepare_operator__ai_onnx_ml__arrayfeatureextractor__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__arrayfeatureextractor__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__arrayfeatureextractor__1;

operator_executer
resolve_operator__ai_onnx_ml__arrayfeatureextractor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__arrayfeatureextractor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__arrayfeatureextractor__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__arrayfeatureextractor__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__arrayfeatureextractor__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__arrayfeatureextractor__1__T_tensor_int64(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__arrayfeatureextractor__1__T_tensor_string(
    node_context *ctx
);

# endif