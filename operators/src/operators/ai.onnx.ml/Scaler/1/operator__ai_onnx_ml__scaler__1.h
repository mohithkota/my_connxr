//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__SCALER__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__SCALER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'Scaler' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Rescale input data, for example to standardize features by removing the mean and scaling to unit variance.
 * 
 * Constraint T:
 *   The input must be a tensor of a numeric type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Input T X:
 *   Data to be scaled.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output tensor(float) Y:
 *   Scaled output data.
 *   Allowed Types: tensor_float
 * Attribute FLOATS offset (optional):
 *   First, offset by this.<br>Can be length of features in an [N,F] tensor or
 *   length 1, in which case it applies to all features, regardless of
 *   dimension count.
 * 
 * Attribute FLOATS scale (optional):
 *   Second, multiply by this.<br>Can be length of features in an [N,F] tensor
 *   or length 1, in which case it applies to all features, regardless of
 *   dimension count.<br>Must be same length as 'offset'
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:641
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#Scaler
 */

operator_status
prepare_operator__ai_onnx_ml__scaler__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__scaler__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__scaler__1;

operator_executer
resolve_operator__ai_onnx_ml__scaler__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__scaler__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__scaler__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__scaler__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__scaler__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__scaler__1__T_tensor_int64(
    node_context *ctx
);

# endif