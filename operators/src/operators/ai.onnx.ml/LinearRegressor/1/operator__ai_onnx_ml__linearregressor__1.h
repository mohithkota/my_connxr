//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__LINEARREGRESSOR__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__LINEARREGRESSOR__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'LinearRegressor' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Generalized linear regression evaluation.<br>
 *     If targets is set to 1 (default) then univariate regression is performed.<br>
 *     If targets is set to M then M sets of coefficients must be passed in as a sequence
 *     and M results will be output for each input n in N.<br>
 *     The coefficients array is of length n, and the coefficients for each target are contiguous.
 *     Intercepts are optional but if provided must match the number of targets.
 * 
 * Constraint T:
 *   The input must be a tensor of a numeric type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Input T X:
 *   Data to be regressed.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output tensor(float) Y:
 *   Regression outputs (one per target, per example).
 *   Allowed Types: tensor_float
 * Attribute FLOATS coefficients (optional):
 *   Weights of the model(s).
 * 
 * Attribute FLOATS intercepts (optional):
 *   Weights of the intercepts, if used.
 * 
 * Attribute STRING post_transform (optional):
 *   Indicates the transform to apply to the regression output vector.<br>One
 *   of 'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
 * 
 * Attribute INT targets (optional):
 *   The total number of regression targets, 1 if not defined.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:531
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#LinearRegressor
 */

operator_status
prepare_operator__ai_onnx_ml__linearregressor__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__linearregressor__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__linearregressor__1;

operator_executer
resolve_operator__ai_onnx_ml__linearregressor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearregressor__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearregressor__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearregressor__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearregressor__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__linearregressor__1__T_tensor_int64(
    node_context *ctx
);

# endif