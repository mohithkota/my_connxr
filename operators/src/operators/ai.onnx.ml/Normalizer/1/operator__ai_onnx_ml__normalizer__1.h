//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__NORMALIZER__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__NORMALIZER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'Normalizer' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Normalize the input.  There are three normalization modes, which have the corresponding formulas,
 *     defined using element-wise infix operators '/' and '^' and tensor-wide functions 'max' and 'sum':<br>
 * <br>
 *     Max: Y = X / max(X)<br>
 *     L1:  Y = X / sum(X)<br>
 *     L2:  Y = sqrt(X^2 / sum(X^2)}<br>
 *     In all modes, if the divisor is zero, Y == X.
 * <br>
 *     For batches, that is, [N,C] tensors, normalization is done along the C axis. In other words, each row
 *     of the batch is normalized independently.
 * 
 * Constraint T:
 *   The input must be a tensor of a numeric type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Input T X:
 *   Data to be encoded, a tensor of shape [N,C] or [C]
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output tensor(float) Y:
 *   Encoded output data
 *   Allowed Types: tensor_float
 * Attribute STRING norm (optional):
 *   One of 'MAX,' 'L1,' 'L2'
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:569
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#Normalizer
 */

operator_status
prepare_operator__ai_onnx_ml__normalizer__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__normalizer__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__normalizer__1;

operator_executer
resolve_operator__ai_onnx_ml__normalizer__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__normalizer__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__normalizer__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__normalizer__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__normalizer__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__normalizer__1__T_tensor_int64(
    node_context *ctx
);

# endif