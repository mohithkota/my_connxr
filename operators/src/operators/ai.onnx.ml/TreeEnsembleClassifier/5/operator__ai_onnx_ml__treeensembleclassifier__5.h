//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__TREEENSEMBLECLASSIFIER__5_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__TREEENSEMBLECLASSIFIER__5_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'TreeEnsembleClassifier' version 5
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * This operator is DEPRECATED. Please use TreeEnsemble with provides similar functionality.
 *     In order to determine the top class, the ArgMax node can be applied to the output of TreeEnsemble.
 *     To encode class labels, use a LabelEncoder operator.
 *     Tree Ensemble classifier. Returns the top class for each of N inputs.<br>
 *     The attributes named 'nodes_X' form a sequence of tuples, associated by
 *     index into the sequences, which must all be of equal length. These tuples
 *     define the nodes.<br>
 *     Similarly, all fields prefixed with 'class_' are tuples of votes at the leaves.
 *     A leaf may have multiple votes, where each vote is weighted by
 *     the associated class_weights index.<br>
 *     One and only one of classlabels_strings or classlabels_int64s
 *     will be defined. The class_ids are indices into this list.
 *     All fields ending with <i>_as_tensor</i> can be used instead of the
 *     same parameter without the suffix if the element type is double and not float.
 * @deprecated Avoid usage!
 * Constraint T1:
 *   The input type must be a tensor of a numeric type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * 
 * Constraint T2:
 *   The output type will be a tensor of strings or integers, depending on
 *   which of the classlabels_* attributes is used.
 *   Allowed Types: tensor_int64, tensor_string
 * Input T1 X:
 *   Input of shape [N,F]
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output T2 Y:
 *   N, Top class for each point
 *   Allowed Types: tensor_int64, tensor_string
 * 
 * Output tensor(float) Z:
 *   The class score for each class, for each point, a tensor of shape [N,E].
 *   Allowed Types: tensor_float
 * Attribute FLOATS base_values (optional):
 *   Base values for classification, added to final class score; the size must
 *   be the same as the classes or can be left unassigned (assumed 0)
 * 
 * Attribute TENSOR base_values_as_tensor (optional):
 *   Base values for classification, added to final class score; the size must
 *   be the same as the classes or can be left unassigned (assumed 0)
 * 
 * Attribute INTS class_ids (optional):
 *   The index of the class list that each weight is for.
 * 
 * Attribute INTS class_nodeids (optional):
 *   node id that this weight is for.
 * 
 * Attribute INTS class_treeids (optional):
 *   The id of the tree that this node is in.
 * 
 * Attribute FLOATS class_weights (optional):
 *   The weight for the class in class_id.
 * 
 * Attribute TENSOR class_weights_as_tensor (optional):
 *   The weight for the class in class_id.
 * 
 * Attribute INTS classlabels_int64s (optional):
 *   Class labels if using integer labels.<br>One and only one of the
 *   'classlabels_*' attributes must be defined.
 * 
 * Attribute STRINGS classlabels_strings (optional):
 *   Class labels if using string labels.<br>One and only one of the
 *   'classlabels_*' attributes must be defined.
 * 
 * Attribute INTS nodes_falsenodeids (optional):
 *   Child node if expression is false.
 * 
 * Attribute INTS nodes_featureids (optional):
 *   Feature id for each node.
 * 
 * Attribute FLOATS nodes_hitrates (optional):
 *   Popularity of each node, used for performance and may be omitted.
 * 
 * Attribute TENSOR nodes_hitrates_as_tensor (optional):
 *   Popularity of each node, used for performance and may be omitted.
 * 
 * Attribute INTS nodes_missing_value_tracks_true (optional):
 *   For each node, define what to do in the presence of a missing value: if a
 *   value is missing (NaN), use the 'true' or 'false' branch based on the
 *   value in this array.<br>This attribute may be left undefined, and the
 *   default value is false (0) for all nodes.
 * 
 * Attribute STRINGS nodes_modes (optional):
 *   The node kind, that is, the comparison to make at the node. There is no
 *   comparison to make at a leaf node.<br>One of 'BRANCH_LEQ', 'BRANCH_LT',
 *   'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ', 'LEAF'
 * 
 * Attribute INTS nodes_nodeids (optional):
 *   Node id for each node. Ids may restart at zero for each tree, but it not
 *   required to.
 * 
 * Attribute INTS nodes_treeids (optional):
 *   Tree id for each node.
 * 
 * Attribute INTS nodes_truenodeids (optional):
 *   Child node if expression is true.
 * 
 * Attribute FLOATS nodes_values (optional):
 *   Thresholds to do the splitting on for each node.
 * 
 * Attribute TENSOR nodes_values_as_tensor (optional):
 *   Thresholds to do the splitting on for each node.
 * 
 * Attribute STRING post_transform (optional):
 *   Indicates the transform to apply to the score. <br> One of 'NONE,'
 *   'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT.'
 *
 * @since version 5
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:800
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#TreeEnsembleClassifier
 */

operator_status
prepare_operator__ai_onnx_ml__treeensembleclassifier__5(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__treeensembleclassifier__5;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__treeensembleclassifier__5;

operator_executer
resolve_operator__ai_onnx_ml__treeensembleclassifier__5(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleclassifier__5(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleclassifier__5__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleclassifier__5__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleclassifier__5__T1_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__treeensembleclassifier__5__T1_tensor_int64(
    node_context *ctx
);

# endif