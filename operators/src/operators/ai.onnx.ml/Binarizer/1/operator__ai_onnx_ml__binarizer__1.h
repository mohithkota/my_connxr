//this file was generated by ../../../../../../../../connx/connx_ajit/scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__BINARIZER__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__BINARIZER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'Binarizer' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Maps the values of the input tensor to either 0 or 1, element-wise, based on the outcome of a comparison against a threshold value.
 * 
 * Constraint T:
 *   The input must be a tensor of a numeric type. The output will be of the
 *   same tensor type.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Input T X:
 *   Data to be binarized
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output T Y:
 *   Binarized output data
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Attribute FLOAT threshold (optional):
 *   Values greater than this are mapped to 1, others to 0.
 *
 * @since version 1
 *
 * @see github/workspace/onnx/defs/traditionalml/defs.cc:79
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#Binarizer
 */

operator_status
prepare_operator__ai_onnx_ml__binarizer__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__binarizer__1;

typedef struct {
// no attributes
} context_operator__ai_onnx_ml__binarizer__1;

operator_executer
resolve_operator__ai_onnx_ml__binarizer__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__binarizer__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__binarizer__1__T_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__binarizer__1__T_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__binarizer__1__T_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__binarizer__1__T_tensor_int64(
    node_context *ctx
);

# endif